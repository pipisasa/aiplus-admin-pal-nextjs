### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AggregateCity {
  _avg: CityAvgAggregateOutputType
  _count: CityCountAggregateOutputType
  _max: CityMaxAggregateOutputType
  _min: CityMinAggregateOutputType
  _sum: CitySumAggregateOutputType
}

type AggregateFaq {
  _avg: FaqAvgAggregateOutputType
  _count: FaqCountAggregateOutputType
  _max: FaqMaxAggregateOutputType
  _min: FaqMinAggregateOutputType
  _sum: FaqSumAggregateOutputType
}

type AggregateFeature {
  _avg: FeatureAvgAggregateOutputType
  _count: FeatureCountAggregateOutputType
  _max: FeatureMaxAggregateOutputType
  _min: FeatureMinAggregateOutputType
  _sum: FeatureSumAggregateOutputType
}

type AggregateImage {
  _avg: ImageAvgAggregateOutputType
  _count: ImageCountAggregateOutputType
  _max: ImageMaxAggregateOutputType
  _min: ImageMinAggregateOutputType
  _sum: ImageSumAggregateOutputType
}

type AggregateProgram {
  _avg: ProgramAvgAggregateOutputType
  _count: ProgramCountAggregateOutputType
  _max: ProgramMaxAggregateOutputType
  _min: ProgramMinAggregateOutputType
  _sum: ProgramSumAggregateOutputType
}

type AggregateSchool {
  _avg: SchoolAvgAggregateOutputType
  _count: SchoolCountAggregateOutputType
  _max: SchoolMaxAggregateOutputType
  _min: SchoolMinAggregateOutputType
  _sum: SchoolSumAggregateOutputType
}

type AggregateStudent {
  _avg: StudentAvgAggregateOutputType
  _count: StudentCountAggregateOutputType
  _max: StudentMaxAggregateOutputType
  _min: StudentMinAggregateOutputType
  _sum: StudentSumAggregateOutputType
}

type AggregateSubject {
  _avg: SubjectAvgAggregateOutputType
  _count: SubjectCountAggregateOutputType
  _max: SubjectMaxAggregateOutputType
  _min: SubjectMinAggregateOutputType
  _sum: SubjectSumAggregateOutputType
}

type AggregateTeacher {
  _avg: TeacherAvgAggregateOutputType
  _count: TeacherCountAggregateOutputType
  _max: TeacherMaxAggregateOutputType
  _min: TeacherMinAggregateOutputType
  _sum: TeacherSumAggregateOutputType
}

type AggregateUser {
  _avg: UserAvgAggregateOutputType
  _count: UserCountAggregateOutputType
  _max: UserMaxAggregateOutputType
  _min: UserMinAggregateOutputType
  _sum: UserSumAggregateOutputType
}

type BatchPayload {
  count: Int!
}

"""BigInt custom scalar type"""
scalar BigInt

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

type City {
  _count: CityCountOutputType
  createdAt: DateTime!
  id: Int!
  name: String!
  schools(cursor: SchoolWhereUniqueInput, distinct: SchoolScalarFieldEnum, orderBy: SchoolOrderByWithRelationInput, skip: Int, take: Int, where: SchoolWhereInput): [School!]!
  updatedAt: DateTime!
}

type CityAvgAggregateOutputType {
  id: Float
}

input CityAvgOrderByAggregateInput {
  id: SortOrder
}

type CityCountAggregateOutputType {
  _all: Int!
  createdAt: Int!
  id: Int!
  name: Int!
  updatedAt: Int!
}

input CityCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type CityCountOutputType {
  schools: Int!
}

input CityCreateInput {
  createdAt: DateTime
  name: String!
  schools: SchoolCreateNestedManyWithoutCityInput
  updatedAt: DateTime
}

input CityCreateManyInput {
  createdAt: DateTime
  id: Int
  name: String!
  updatedAt: DateTime
}

input CityCreateNestedOneWithoutSchoolsInput {
  connect: CityWhereUniqueInput
  connectOrCreate: CityCreateOrConnectWithoutSchoolsInput
  create: CityUncheckedCreateWithoutSchoolsInput
}

input CityCreateOrConnectWithoutSchoolsInput {
  create: CityUncheckedCreateWithoutSchoolsInput!
  where: CityWhereUniqueInput!
}

input CityCreateWithoutSchoolsInput {
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
}

type CityMaxAggregateOutputType {
  createdAt: DateTime
  id: Int
  name: String
  updatedAt: DateTime
}

input CityMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type CityMinAggregateOutputType {
  createdAt: DateTime
  id: Int
  name: String
  updatedAt: DateTime
}

input CityMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input CityOrderByWithAggregationInput {
  _avg: CityAvgOrderByAggregateInput
  _count: CityCountOrderByAggregateInput
  _max: CityMaxOrderByAggregateInput
  _min: CityMinOrderByAggregateInput
  _sum: CitySumOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input CityOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  schools: SchoolOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input CityRelationFilter {
  is: CityWhereInput
  isNot: CityWhereInput
}

enum CityScalarFieldEnum {
  createdAt
  id
  name
  updatedAt
}

input CityScalarWhereWithAggregatesInput {
  AND: [CityScalarWhereWithAggregatesInput]
  NOT: [CityScalarWhereWithAggregatesInput]
  OR: [CityScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type CitySumAggregateOutputType {
  id: Int
}

input CitySumOrderByAggregateInput {
  id: SortOrder
}

input CityUncheckedCreateInput {
  createdAt: DateTime
  id: Int
  name: String!
  schools: SchoolUncheckedCreateNestedManyWithoutCityInput
  updatedAt: DateTime
}

input CityUncheckedCreateWithoutSchoolsInput {
  createdAt: DateTime
  id: Int
  name: String!
  updatedAt: DateTime
}

input CityUncheckedUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  schools: SchoolUncheckedUpdateManyWithoutCityInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CityUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CityUncheckedUpdateWithoutSchoolsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CityUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  schools: SchoolUpdateManyWithoutCityInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CityUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CityUpdateOneRequiredWithoutSchoolsInput {
  connect: CityWhereUniqueInput
  connectOrCreate: CityCreateOrConnectWithoutSchoolsInput
  create: CityUncheckedCreateWithoutSchoolsInput
  update: CityUncheckedUpdateWithoutSchoolsInput
  upsert: CityUpsertWithoutSchoolsInput
}

input CityUpdateWithoutSchoolsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CityUpsertWithoutSchoolsInput {
  create: CityUncheckedCreateWithoutSchoolsInput!
  update: CityUncheckedUpdateWithoutSchoolsInput!
}

input CityWhereInput {
  AND: [CityWhereInput]
  NOT: [CityWhereInput]
  OR: [CityWhereInput]
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  schools: SchoolListRelationFilter
  updatedAt: DateTimeFilter
}

input CityWhereUniqueInput {
  id: Int
}

"""Date custom scalar type"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime]
}

"""Decimal custom scalar type"""
scalar Decimal

type Enum {
  fields: [String!]!
  name: String!
}

type Faq {
  createdAt: DateTime!
  descriptionKz: String!
  descriptionRu: String!
  id: Int!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime!
}

type FaqAvgAggregateOutputType {
  id: Float
}

input FaqAvgOrderByAggregateInput {
  id: SortOrder
}

type FaqCountAggregateOutputType {
  _all: Int!
  createdAt: Int!
  descriptionKz: Int!
  descriptionRu: Int!
  id: Int!
  titleKz: Int!
  titleRu: Int!
  updatedAt: Int!
}

input FaqCountOrderByAggregateInput {
  createdAt: SortOrder
  descriptionKz: SortOrder
  descriptionRu: SortOrder
  id: SortOrder
  titleKz: SortOrder
  titleRu: SortOrder
  updatedAt: SortOrder
}

input FaqCreateInput {
  createdAt: DateTime
  descriptionKz: String!
  descriptionRu: String!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime
}

input FaqCreateManyInput {
  createdAt: DateTime
  descriptionKz: String!
  descriptionRu: String!
  id: Int
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime
}

type FaqMaxAggregateOutputType {
  createdAt: DateTime
  descriptionKz: String
  descriptionRu: String
  id: Int
  titleKz: String
  titleRu: String
  updatedAt: DateTime
}

input FaqMaxOrderByAggregateInput {
  createdAt: SortOrder
  descriptionKz: SortOrder
  descriptionRu: SortOrder
  id: SortOrder
  titleKz: SortOrder
  titleRu: SortOrder
  updatedAt: SortOrder
}

type FaqMinAggregateOutputType {
  createdAt: DateTime
  descriptionKz: String
  descriptionRu: String
  id: Int
  titleKz: String
  titleRu: String
  updatedAt: DateTime
}

input FaqMinOrderByAggregateInput {
  createdAt: SortOrder
  descriptionKz: SortOrder
  descriptionRu: SortOrder
  id: SortOrder
  titleKz: SortOrder
  titleRu: SortOrder
  updatedAt: SortOrder
}

input FaqOrderByWithAggregationInput {
  _avg: FaqAvgOrderByAggregateInput
  _count: FaqCountOrderByAggregateInput
  _max: FaqMaxOrderByAggregateInput
  _min: FaqMinOrderByAggregateInput
  _sum: FaqSumOrderByAggregateInput
  createdAt: SortOrder
  descriptionKz: SortOrder
  descriptionRu: SortOrder
  id: SortOrder
  titleKz: SortOrder
  titleRu: SortOrder
  updatedAt: SortOrder
}

input FaqOrderByWithRelationInput {
  createdAt: SortOrder
  descriptionKz: SortOrder
  descriptionRu: SortOrder
  id: SortOrder
  titleKz: SortOrder
  titleRu: SortOrder
  updatedAt: SortOrder
}

enum FaqScalarFieldEnum {
  createdAt
  descriptionKz
  descriptionRu
  id
  titleKz
  titleRu
  updatedAt
}

input FaqScalarWhereWithAggregatesInput {
  AND: [FaqScalarWhereWithAggregatesInput]
  NOT: [FaqScalarWhereWithAggregatesInput]
  OR: [FaqScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  descriptionKz: StringWithAggregatesFilter
  descriptionRu: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  titleKz: StringWithAggregatesFilter
  titleRu: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type FaqSumAggregateOutputType {
  id: Int
}

input FaqSumOrderByAggregateInput {
  id: SortOrder
}

input FaqUncheckedCreateInput {
  createdAt: DateTime
  descriptionKz: String!
  descriptionRu: String!
  id: Int
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime
}

input FaqUncheckedUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  descriptionKz: StringFieldUpdateOperationsInput
  descriptionRu: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FaqUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  descriptionKz: StringFieldUpdateOperationsInput
  descriptionRu: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FaqUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  descriptionKz: StringFieldUpdateOperationsInput
  descriptionRu: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FaqUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  descriptionKz: StringFieldUpdateOperationsInput
  descriptionRu: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FaqWhereInput {
  AND: [FaqWhereInput]
  NOT: [FaqWhereInput]
  OR: [FaqWhereInput]
  createdAt: DateTimeFilter
  descriptionKz: StringFilter
  descriptionRu: StringFilter
  id: IntFilter
  titleKz: StringFilter
  titleRu: StringFilter
  updatedAt: DateTimeFilter
}

input FaqWhereUniqueInput {
  id: Int
}

type Feature {
  _count: FeatureCountOutputType
  contentEn: String!
  contentKz: String!
  contentRu: String!
  createdAt: DateTime!
  id: Int!
  images(cursor: ImageWhereUniqueInput, distinct: ImageScalarFieldEnum, orderBy: ImageOrderByWithRelationInput, skip: Int, take: Int, where: ImageWhereInput): [Image!]!
  titleEn: String!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime!
}

type FeatureAvgAggregateOutputType {
  id: Float
}

input FeatureAvgOrderByAggregateInput {
  id: SortOrder
}

type FeatureCountAggregateOutputType {
  _all: Int!
  contentEn: Int!
  contentKz: Int!
  contentRu: Int!
  createdAt: Int!
  id: Int!
  titleEn: Int!
  titleKz: Int!
  titleRu: Int!
  updatedAt: Int!
}

input FeatureCountOrderByAggregateInput {
  contentEn: SortOrder
  contentKz: SortOrder
  contentRu: SortOrder
  createdAt: SortOrder
  id: SortOrder
  titleEn: SortOrder
  titleKz: SortOrder
  titleRu: SortOrder
  updatedAt: SortOrder
}

type FeatureCountOutputType {
  images: Int!
}

input FeatureCreateInput {
  contentEn: String!
  contentKz: String!
  contentRu: String!
  createdAt: DateTime
  images: ImageCreateNestedManyWithoutFeatureInput
  titleEn: String!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime
}

input FeatureCreateManyInput {
  contentEn: String!
  contentKz: String!
  contentRu: String!
  createdAt: DateTime
  id: Int
  titleEn: String!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime
}

input FeatureCreateNestedOneWithoutImagesInput {
  connect: FeatureWhereUniqueInput
  connectOrCreate: FeatureCreateOrConnectWithoutImagesInput
  create: FeatureUncheckedCreateWithoutImagesInput
}

input FeatureCreateOrConnectWithoutImagesInput {
  create: FeatureUncheckedCreateWithoutImagesInput!
  where: FeatureWhereUniqueInput!
}

input FeatureCreateWithoutImagesInput {
  contentEn: String!
  contentKz: String!
  contentRu: String!
  createdAt: DateTime
  titleEn: String!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime
}

type FeatureMaxAggregateOutputType {
  contentEn: String
  contentKz: String
  contentRu: String
  createdAt: DateTime
  id: Int
  titleEn: String
  titleKz: String
  titleRu: String
  updatedAt: DateTime
}

input FeatureMaxOrderByAggregateInput {
  contentEn: SortOrder
  contentKz: SortOrder
  contentRu: SortOrder
  createdAt: SortOrder
  id: SortOrder
  titleEn: SortOrder
  titleKz: SortOrder
  titleRu: SortOrder
  updatedAt: SortOrder
}

type FeatureMinAggregateOutputType {
  contentEn: String
  contentKz: String
  contentRu: String
  createdAt: DateTime
  id: Int
  titleEn: String
  titleKz: String
  titleRu: String
  updatedAt: DateTime
}

input FeatureMinOrderByAggregateInput {
  contentEn: SortOrder
  contentKz: SortOrder
  contentRu: SortOrder
  createdAt: SortOrder
  id: SortOrder
  titleEn: SortOrder
  titleKz: SortOrder
  titleRu: SortOrder
  updatedAt: SortOrder
}

input FeatureOrderByWithAggregationInput {
  _avg: FeatureAvgOrderByAggregateInput
  _count: FeatureCountOrderByAggregateInput
  _max: FeatureMaxOrderByAggregateInput
  _min: FeatureMinOrderByAggregateInput
  _sum: FeatureSumOrderByAggregateInput
  contentEn: SortOrder
  contentKz: SortOrder
  contentRu: SortOrder
  createdAt: SortOrder
  id: SortOrder
  titleEn: SortOrder
  titleKz: SortOrder
  titleRu: SortOrder
  updatedAt: SortOrder
}

input FeatureOrderByWithRelationInput {
  contentEn: SortOrder
  contentKz: SortOrder
  contentRu: SortOrder
  createdAt: SortOrder
  id: SortOrder
  images: ImageOrderByRelationAggregateInput
  titleEn: SortOrder
  titleKz: SortOrder
  titleRu: SortOrder
  updatedAt: SortOrder
}

input FeatureRelationFilter {
  is: FeatureWhereInput
  isNot: FeatureWhereInput
}

enum FeatureScalarFieldEnum {
  contentEn
  contentKz
  contentRu
  createdAt
  id
  titleEn
  titleKz
  titleRu
  updatedAt
}

input FeatureScalarWhereWithAggregatesInput {
  AND: [FeatureScalarWhereWithAggregatesInput]
  NOT: [FeatureScalarWhereWithAggregatesInput]
  OR: [FeatureScalarWhereWithAggregatesInput]
  contentEn: StringWithAggregatesFilter
  contentKz: StringWithAggregatesFilter
  contentRu: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  titleEn: StringWithAggregatesFilter
  titleKz: StringWithAggregatesFilter
  titleRu: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type FeatureSumAggregateOutputType {
  id: Int
}

input FeatureSumOrderByAggregateInput {
  id: SortOrder
}

input FeatureUncheckedCreateInput {
  contentEn: String!
  contentKz: String!
  contentRu: String!
  createdAt: DateTime
  id: Int
  images: ImageUncheckedCreateNestedManyWithoutFeatureInput
  titleEn: String!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime
}

input FeatureUncheckedCreateWithoutImagesInput {
  contentEn: String!
  contentKz: String!
  contentRu: String!
  createdAt: DateTime
  id: Int
  titleEn: String!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime
}

input FeatureUncheckedUpdateInput {
  contentEn: StringFieldUpdateOperationsInput
  contentKz: StringFieldUpdateOperationsInput
  contentRu: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  images: ImageUncheckedUpdateManyWithoutFeatureInput
  titleEn: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeatureUncheckedUpdateManyInput {
  contentEn: StringFieldUpdateOperationsInput
  contentKz: StringFieldUpdateOperationsInput
  contentRu: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  titleEn: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeatureUncheckedUpdateWithoutImagesInput {
  contentEn: StringFieldUpdateOperationsInput
  contentKz: StringFieldUpdateOperationsInput
  contentRu: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  titleEn: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeatureUpdateInput {
  contentEn: StringFieldUpdateOperationsInput
  contentKz: StringFieldUpdateOperationsInput
  contentRu: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutFeatureInput
  titleEn: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeatureUpdateManyMutationInput {
  contentEn: StringFieldUpdateOperationsInput
  contentKz: StringFieldUpdateOperationsInput
  contentRu: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  titleEn: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeatureUpdateOneWithoutImagesInput {
  connect: FeatureWhereUniqueInput
  connectOrCreate: FeatureCreateOrConnectWithoutImagesInput
  create: FeatureUncheckedCreateWithoutImagesInput
  delete: Boolean
  disconnect: Boolean
  update: FeatureUncheckedUpdateWithoutImagesInput
  upsert: FeatureUpsertWithoutImagesInput
}

input FeatureUpdateWithoutImagesInput {
  contentEn: StringFieldUpdateOperationsInput
  contentKz: StringFieldUpdateOperationsInput
  contentRu: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  titleEn: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeatureUpsertWithoutImagesInput {
  create: FeatureUncheckedCreateWithoutImagesInput!
  update: FeatureUncheckedUpdateWithoutImagesInput!
}

input FeatureWhereInput {
  AND: [FeatureWhereInput]
  NOT: [FeatureWhereInput]
  OR: [FeatureWhereInput]
  contentEn: StringFilter
  contentKz: StringFilter
  contentRu: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  images: ImageListRelationFilter
  titleEn: StringFilter
  titleKz: StringFilter
  titleRu: StringFilter
  updatedAt: DateTimeFilter
}

input FeatureWhereUniqueInput {
  id: Int
}

type Field {
  create: Boolean!
  editor: Boolean!
  filter: Boolean!
  id: String!
  isId: Boolean!
  kind: KindEnum!
  list: Boolean!
  name: String!
  order: Int!
  read: Boolean!
  relationField: Boolean
  required: Boolean!
  sort: Boolean!
  title: String!
  type: String!
  unique: Boolean!
  update: Boolean!
  upload: Boolean!
}

type Image {
  contentType: String!
  createdAt: DateTime!
  feature: Feature
  featureId: Int
  filename: String!
  id: Int!
  name: String!
  size: Int!
  storage: String!
  student: Student
  studentId: Int
  teacher: Teacher
  teacherId: Int
  updatedAt: DateTime!
  url: String!
}

type ImageAvgAggregateOutputType {
  featureId: Float
  id: Float
  size: Float
  studentId: Float
  teacherId: Float
}

input ImageAvgOrderByAggregateInput {
  featureId: SortOrder
  id: SortOrder
  size: SortOrder
  studentId: SortOrder
  teacherId: SortOrder
}

type ImageCountAggregateOutputType {
  _all: Int!
  contentType: Int!
  createdAt: Int!
  featureId: Int!
  filename: Int!
  id: Int!
  name: Int!
  size: Int!
  storage: Int!
  studentId: Int!
  teacherId: Int!
  updatedAt: Int!
  url: Int!
}

input ImageCountOrderByAggregateInput {
  contentType: SortOrder
  createdAt: SortOrder
  featureId: SortOrder
  filename: SortOrder
  id: SortOrder
  name: SortOrder
  size: SortOrder
  storage: SortOrder
  studentId: SortOrder
  teacherId: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

input ImageCreateInput {
  contentType: String!
  createdAt: DateTime
  feature: FeatureCreateNestedOneWithoutImagesInput
  filename: String!
  name: String!
  size: Int!
  storage: String
  student: StudentCreateNestedOneWithoutImagesInput
  teacher: TeacherCreateNestedOneWithoutImagesInput
  updatedAt: DateTime
  url: String!
}

input ImageCreateManyFeatureInput {
  contentType: String!
  createdAt: DateTime
  filename: String!
  id: Int
  name: String!
  size: Int!
  storage: String
  studentId: Int
  teacherId: Int
  updatedAt: DateTime
  url: String!
}

input ImageCreateManyFeatureInputEnvelope {
  data: ImageCreateManyFeatureInput!
  skipDuplicates: Boolean
}

input ImageCreateManyInput {
  contentType: String!
  createdAt: DateTime
  featureId: Int
  filename: String!
  id: Int
  name: String!
  size: Int!
  storage: String
  studentId: Int
  teacherId: Int
  updatedAt: DateTime
  url: String!
}

input ImageCreateManyStudentInput {
  contentType: String!
  createdAt: DateTime
  featureId: Int
  filename: String!
  id: Int
  name: String!
  size: Int!
  storage: String
  teacherId: Int
  updatedAt: DateTime
  url: String!
}

input ImageCreateManyStudentInputEnvelope {
  data: ImageCreateManyStudentInput!
  skipDuplicates: Boolean
}

input ImageCreateManyTeacherInput {
  contentType: String!
  createdAt: DateTime
  featureId: Int
  filename: String!
  id: Int
  name: String!
  size: Int!
  storage: String
  studentId: Int
  updatedAt: DateTime
  url: String!
}

input ImageCreateManyTeacherInputEnvelope {
  data: ImageCreateManyTeacherInput!
  skipDuplicates: Boolean
}

input ImageCreateNestedManyWithoutFeatureInput {
  connect: [ImageWhereUniqueInput]
  connectOrCreate: [ImageCreateOrConnectWithoutFeatureInput]
  create: [ImageCreateWithoutFeatureInput]
  createMany: ImageCreateManyFeatureInputEnvelope
}

input ImageCreateNestedManyWithoutStudentInput {
  connect: [ImageWhereUniqueInput]
  connectOrCreate: [ImageCreateOrConnectWithoutStudentInput]
  create: [ImageCreateWithoutStudentInput]
  createMany: ImageCreateManyStudentInputEnvelope
}

input ImageCreateNestedManyWithoutTeacherInput {
  connect: [ImageWhereUniqueInput]
  connectOrCreate: [ImageCreateOrConnectWithoutTeacherInput]
  create: [ImageCreateWithoutTeacherInput]
  createMany: ImageCreateManyTeacherInputEnvelope
}

input ImageCreateOrConnectWithoutFeatureInput {
  create: ImageUncheckedCreateWithoutFeatureInput!
  where: ImageWhereUniqueInput!
}

input ImageCreateOrConnectWithoutStudentInput {
  create: ImageUncheckedCreateWithoutStudentInput!
  where: ImageWhereUniqueInput!
}

input ImageCreateOrConnectWithoutTeacherInput {
  create: ImageUncheckedCreateWithoutTeacherInput!
  where: ImageWhereUniqueInput!
}

input ImageCreateWithoutFeatureInput {
  contentType: String!
  createdAt: DateTime
  filename: String!
  name: String!
  size: Int!
  storage: String
  student: StudentCreateNestedOneWithoutImagesInput
  teacher: TeacherCreateNestedOneWithoutImagesInput
  updatedAt: DateTime
  url: String!
}

input ImageCreateWithoutStudentInput {
  contentType: String!
  createdAt: DateTime
  feature: FeatureCreateNestedOneWithoutImagesInput
  filename: String!
  name: String!
  size: Int!
  storage: String
  teacher: TeacherCreateNestedOneWithoutImagesInput
  updatedAt: DateTime
  url: String!
}

input ImageCreateWithoutTeacherInput {
  contentType: String!
  createdAt: DateTime
  feature: FeatureCreateNestedOneWithoutImagesInput
  filename: String!
  name: String!
  size: Int!
  storage: String
  student: StudentCreateNestedOneWithoutImagesInput
  updatedAt: DateTime
  url: String!
}

input ImageListRelationFilter {
  every: ImageWhereInput
  none: ImageWhereInput
  some: ImageWhereInput
}

type ImageMaxAggregateOutputType {
  contentType: String
  createdAt: DateTime
  featureId: Int
  filename: String
  id: Int
  name: String
  size: Int
  storage: String
  studentId: Int
  teacherId: Int
  updatedAt: DateTime
  url: String
}

input ImageMaxOrderByAggregateInput {
  contentType: SortOrder
  createdAt: SortOrder
  featureId: SortOrder
  filename: SortOrder
  id: SortOrder
  name: SortOrder
  size: SortOrder
  storage: SortOrder
  studentId: SortOrder
  teacherId: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

type ImageMinAggregateOutputType {
  contentType: String
  createdAt: DateTime
  featureId: Int
  filename: String
  id: Int
  name: String
  size: Int
  storage: String
  studentId: Int
  teacherId: Int
  updatedAt: DateTime
  url: String
}

input ImageMinOrderByAggregateInput {
  contentType: SortOrder
  createdAt: SortOrder
  featureId: SortOrder
  filename: SortOrder
  id: SortOrder
  name: SortOrder
  size: SortOrder
  storage: SortOrder
  studentId: SortOrder
  teacherId: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

input ImageOrderByRelationAggregateInput {
  _count: SortOrder
}

input ImageOrderByWithAggregationInput {
  _avg: ImageAvgOrderByAggregateInput
  _count: ImageCountOrderByAggregateInput
  _max: ImageMaxOrderByAggregateInput
  _min: ImageMinOrderByAggregateInput
  _sum: ImageSumOrderByAggregateInput
  contentType: SortOrder
  createdAt: SortOrder
  featureId: SortOrder
  filename: SortOrder
  id: SortOrder
  name: SortOrder
  size: SortOrder
  storage: SortOrder
  studentId: SortOrder
  teacherId: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

input ImageOrderByWithRelationInput {
  contentType: SortOrder
  createdAt: SortOrder
  feature: FeatureOrderByWithRelationInput
  featureId: SortOrder
  filename: SortOrder
  id: SortOrder
  name: SortOrder
  size: SortOrder
  storage: SortOrder
  student: StudentOrderByWithRelationInput
  studentId: SortOrder
  teacher: TeacherOrderByWithRelationInput
  teacherId: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

enum ImageScalarFieldEnum {
  contentType
  createdAt
  featureId
  filename
  id
  name
  size
  storage
  studentId
  teacherId
  updatedAt
  url
}

input ImageScalarWhereInput {
  AND: [ImageScalarWhereInput]
  NOT: [ImageScalarWhereInput]
  OR: [ImageScalarWhereInput]
  contentType: StringFilter
  createdAt: DateTimeFilter
  featureId: IntNullableFilter
  filename: StringFilter
  id: IntFilter
  name: StringFilter
  size: IntFilter
  storage: StringFilter
  studentId: IntNullableFilter
  teacherId: IntNullableFilter
  updatedAt: DateTimeFilter
  url: StringFilter
}

input ImageScalarWhereWithAggregatesInput {
  AND: [ImageScalarWhereWithAggregatesInput]
  NOT: [ImageScalarWhereWithAggregatesInput]
  OR: [ImageScalarWhereWithAggregatesInput]
  contentType: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  featureId: IntNullableWithAggregatesFilter
  filename: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  size: IntWithAggregatesFilter
  storage: StringWithAggregatesFilter
  studentId: IntNullableWithAggregatesFilter
  teacherId: IntNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  url: StringWithAggregatesFilter
}

type ImageSumAggregateOutputType {
  featureId: Int
  id: Int
  size: Int
  studentId: Int
  teacherId: Int
}

input ImageSumOrderByAggregateInput {
  featureId: SortOrder
  id: SortOrder
  size: SortOrder
  studentId: SortOrder
  teacherId: SortOrder
}

input ImageUncheckedCreateInput {
  contentType: String!
  createdAt: DateTime
  featureId: Int
  filename: String!
  id: Int
  name: String!
  size: Int!
  storage: String
  studentId: Int
  teacherId: Int
  updatedAt: DateTime
  url: String!
}

input ImageUncheckedCreateNestedManyWithoutFeatureInput {
  connect: [ImageWhereUniqueInput]
  connectOrCreate: [ImageCreateOrConnectWithoutFeatureInput]
  create: [ImageCreateWithoutFeatureInput]
  createMany: ImageCreateManyFeatureInputEnvelope
}

input ImageUncheckedCreateNestedManyWithoutStudentInput {
  connect: [ImageWhereUniqueInput]
  connectOrCreate: [ImageCreateOrConnectWithoutStudentInput]
  create: [ImageCreateWithoutStudentInput]
  createMany: ImageCreateManyStudentInputEnvelope
}

input ImageUncheckedCreateNestedManyWithoutTeacherInput {
  connect: [ImageWhereUniqueInput]
  connectOrCreate: [ImageCreateOrConnectWithoutTeacherInput]
  create: [ImageCreateWithoutTeacherInput]
  createMany: ImageCreateManyTeacherInputEnvelope
}

input ImageUncheckedCreateWithoutFeatureInput {
  contentType: String!
  createdAt: DateTime
  filename: String!
  id: Int
  name: String!
  size: Int!
  storage: String
  studentId: Int
  teacherId: Int
  updatedAt: DateTime
  url: String!
}

input ImageUncheckedCreateWithoutStudentInput {
  contentType: String!
  createdAt: DateTime
  featureId: Int
  filename: String!
  id: Int
  name: String!
  size: Int!
  storage: String
  teacherId: Int
  updatedAt: DateTime
  url: String!
}

input ImageUncheckedCreateWithoutTeacherInput {
  contentType: String!
  createdAt: DateTime
  featureId: Int
  filename: String!
  id: Int
  name: String!
  size: Int!
  storage: String
  studentId: Int
  updatedAt: DateTime
  url: String!
}

input ImageUncheckedUpdateInput {
  contentType: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  featureId: NullableIntFieldUpdateOperationsInput
  filename: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  size: IntFieldUpdateOperationsInput
  storage: StringFieldUpdateOperationsInput
  studentId: NullableIntFieldUpdateOperationsInput
  teacherId: NullableIntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input ImageUncheckedUpdateManyInput {
  contentType: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  featureId: NullableIntFieldUpdateOperationsInput
  filename: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  size: IntFieldUpdateOperationsInput
  storage: StringFieldUpdateOperationsInput
  studentId: NullableIntFieldUpdateOperationsInput
  teacherId: NullableIntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input ImageUncheckedUpdateManyWithoutFeatureInput {
  connect: [ImageWhereUniqueInput]
  connectOrCreate: [ImageCreateOrConnectWithoutFeatureInput]
  create: [ImageCreateWithoutFeatureInput]
  createMany: ImageCreateManyFeatureInputEnvelope
  delete: [ImageWhereUniqueInput]
  deleteMany: [ImageScalarWhereInput]
  disconnect: [ImageWhereUniqueInput]
  set: [ImageWhereUniqueInput]
  update: [ImageUpdateWithWhereUniqueWithoutFeatureInput]
  updateMany: [ImageUpdateManyWithWhereWithoutFeatureInput]
  upsert: [ImageUpsertWithWhereUniqueWithoutFeatureInput]
}

input ImageUncheckedUpdateManyWithoutImagesInput {
  contentType: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  featureId: NullableIntFieldUpdateOperationsInput
  filename: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  size: IntFieldUpdateOperationsInput
  storage: StringFieldUpdateOperationsInput
  teacherId: NullableIntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input ImageUncheckedUpdateManyWithoutStudentInput {
  connect: [ImageWhereUniqueInput]
  connectOrCreate: [ImageCreateOrConnectWithoutStudentInput]
  create: [ImageCreateWithoutStudentInput]
  createMany: ImageCreateManyStudentInputEnvelope
  delete: [ImageWhereUniqueInput]
  deleteMany: [ImageScalarWhereInput]
  disconnect: [ImageWhereUniqueInput]
  set: [ImageWhereUniqueInput]
  update: [ImageUpdateWithWhereUniqueWithoutStudentInput]
  updateMany: [ImageUpdateManyWithWhereWithoutStudentInput]
  upsert: [ImageUpsertWithWhereUniqueWithoutStudentInput]
}

input ImageUncheckedUpdateManyWithoutTeacherInput {
  connect: [ImageWhereUniqueInput]
  connectOrCreate: [ImageCreateOrConnectWithoutTeacherInput]
  create: [ImageCreateWithoutTeacherInput]
  createMany: ImageCreateManyTeacherInputEnvelope
  delete: [ImageWhereUniqueInput]
  deleteMany: [ImageScalarWhereInput]
  disconnect: [ImageWhereUniqueInput]
  set: [ImageWhereUniqueInput]
  update: [ImageUpdateWithWhereUniqueWithoutTeacherInput]
  updateMany: [ImageUpdateManyWithWhereWithoutTeacherInput]
  upsert: [ImageUpsertWithWhereUniqueWithoutTeacherInput]
}

input ImageUncheckedUpdateWithoutFeatureInput {
  contentType: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  filename: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  size: IntFieldUpdateOperationsInput
  storage: StringFieldUpdateOperationsInput
  studentId: NullableIntFieldUpdateOperationsInput
  teacherId: NullableIntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input ImageUncheckedUpdateWithoutStudentInput {
  contentType: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  featureId: NullableIntFieldUpdateOperationsInput
  filename: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  size: IntFieldUpdateOperationsInput
  storage: StringFieldUpdateOperationsInput
  teacherId: NullableIntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input ImageUncheckedUpdateWithoutTeacherInput {
  contentType: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  featureId: NullableIntFieldUpdateOperationsInput
  filename: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  size: IntFieldUpdateOperationsInput
  storage: StringFieldUpdateOperationsInput
  studentId: NullableIntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input ImageUpdateInput {
  contentType: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  feature: FeatureUpdateOneWithoutImagesInput
  filename: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  size: IntFieldUpdateOperationsInput
  storage: StringFieldUpdateOperationsInput
  student: StudentUpdateOneWithoutImagesInput
  teacher: TeacherUpdateOneWithoutImagesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input ImageUpdateManyMutationInput {
  contentType: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  filename: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  size: IntFieldUpdateOperationsInput
  storage: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input ImageUpdateManyWithWhereWithoutFeatureInput {
  data: ImageUncheckedUpdateManyWithoutImagesInput!
  where: ImageScalarWhereInput!
}

input ImageUpdateManyWithWhereWithoutStudentInput {
  data: ImageUncheckedUpdateManyWithoutImagesInput!
  where: ImageScalarWhereInput!
}

input ImageUpdateManyWithWhereWithoutTeacherInput {
  data: ImageUncheckedUpdateManyWithoutImagesInput!
  where: ImageScalarWhereInput!
}

input ImageUpdateManyWithoutFeatureInput {
  connect: [ImageWhereUniqueInput]
  connectOrCreate: [ImageCreateOrConnectWithoutFeatureInput]
  create: [ImageCreateWithoutFeatureInput]
  createMany: ImageCreateManyFeatureInputEnvelope
  delete: [ImageWhereUniqueInput]
  deleteMany: [ImageScalarWhereInput]
  disconnect: [ImageWhereUniqueInput]
  set: [ImageWhereUniqueInput]
  update: [ImageUpdateWithWhereUniqueWithoutFeatureInput]
  updateMany: [ImageUpdateManyWithWhereWithoutFeatureInput]
  upsert: [ImageUpsertWithWhereUniqueWithoutFeatureInput]
}

input ImageUpdateManyWithoutStudentInput {
  connect: [ImageWhereUniqueInput]
  connectOrCreate: [ImageCreateOrConnectWithoutStudentInput]
  create: [ImageCreateWithoutStudentInput]
  createMany: ImageCreateManyStudentInputEnvelope
  delete: [ImageWhereUniqueInput]
  deleteMany: [ImageScalarWhereInput]
  disconnect: [ImageWhereUniqueInput]
  set: [ImageWhereUniqueInput]
  update: [ImageUpdateWithWhereUniqueWithoutStudentInput]
  updateMany: [ImageUpdateManyWithWhereWithoutStudentInput]
  upsert: [ImageUpsertWithWhereUniqueWithoutStudentInput]
}

input ImageUpdateManyWithoutTeacherInput {
  connect: [ImageWhereUniqueInput]
  connectOrCreate: [ImageCreateOrConnectWithoutTeacherInput]
  create: [ImageCreateWithoutTeacherInput]
  createMany: ImageCreateManyTeacherInputEnvelope
  delete: [ImageWhereUniqueInput]
  deleteMany: [ImageScalarWhereInput]
  disconnect: [ImageWhereUniqueInput]
  set: [ImageWhereUniqueInput]
  update: [ImageUpdateWithWhereUniqueWithoutTeacherInput]
  updateMany: [ImageUpdateManyWithWhereWithoutTeacherInput]
  upsert: [ImageUpsertWithWhereUniqueWithoutTeacherInput]
}

input ImageUpdateWithWhereUniqueWithoutFeatureInput {
  data: ImageUncheckedUpdateWithoutFeatureInput!
  where: ImageWhereUniqueInput!
}

input ImageUpdateWithWhereUniqueWithoutStudentInput {
  data: ImageUncheckedUpdateWithoutStudentInput!
  where: ImageWhereUniqueInput!
}

input ImageUpdateWithWhereUniqueWithoutTeacherInput {
  data: ImageUncheckedUpdateWithoutTeacherInput!
  where: ImageWhereUniqueInput!
}

input ImageUpdateWithoutFeatureInput {
  contentType: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  filename: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  size: IntFieldUpdateOperationsInput
  storage: StringFieldUpdateOperationsInput
  student: StudentUpdateOneWithoutImagesInput
  teacher: TeacherUpdateOneWithoutImagesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input ImageUpdateWithoutStudentInput {
  contentType: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  feature: FeatureUpdateOneWithoutImagesInput
  filename: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  size: IntFieldUpdateOperationsInput
  storage: StringFieldUpdateOperationsInput
  teacher: TeacherUpdateOneWithoutImagesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input ImageUpdateWithoutTeacherInput {
  contentType: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  feature: FeatureUpdateOneWithoutImagesInput
  filename: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  size: IntFieldUpdateOperationsInput
  storage: StringFieldUpdateOperationsInput
  student: StudentUpdateOneWithoutImagesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input ImageUpsertWithWhereUniqueWithoutFeatureInput {
  create: ImageUncheckedCreateWithoutFeatureInput!
  update: ImageUncheckedUpdateWithoutFeatureInput!
  where: ImageWhereUniqueInput!
}

input ImageUpsertWithWhereUniqueWithoutStudentInput {
  create: ImageUncheckedCreateWithoutStudentInput!
  update: ImageUncheckedUpdateWithoutStudentInput!
  where: ImageWhereUniqueInput!
}

input ImageUpsertWithWhereUniqueWithoutTeacherInput {
  create: ImageUncheckedCreateWithoutTeacherInput!
  update: ImageUncheckedUpdateWithoutTeacherInput!
  where: ImageWhereUniqueInput!
}

input ImageWhereInput {
  AND: [ImageWhereInput]
  NOT: [ImageWhereInput]
  OR: [ImageWhereInput]
  contentType: StringFilter
  createdAt: DateTimeFilter
  feature: FeatureWhereInput
  featureId: IntNullableFilter
  filename: StringFilter
  id: IntFilter
  name: StringFilter
  size: IntFilter
  storage: StringFilter
  student: StudentWhereInput
  studentId: IntNullableFilter
  teacher: TeacherWhereInput
  teacherId: IntNullableFilter
  updatedAt: DateTimeFilter
  url: StringFilter
}

input ImageWhereUniqueInput {
  id: Int
  url: String
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int]
}

"""Json custom scalar type"""
scalar Json

enum KindEnum {
  enum
  object
  scalar
}

type Model {
  create: Boolean!
  delete: Boolean!
  displayFields: [String!]!
  fields: [Field!]!
  id: String!
  idField: String!
  name: String!
  update: Boolean!
}

type Mutation {
  createOneCity(data: CityCreateInput!): City!
  createOneFaq(data: FaqCreateInput!): Faq!
  createOneFeature(data: FeatureCreateInput!): Feature!
  createOneImage(data: ImageCreateInput!): Image!
  createOneProgram(data: ProgramCreateInput!): Program!
  createOneSchool(data: SchoolCreateInput!): School!
  createOneStudent(data: StudentCreateInput!): Student!
  createOneSubject(data: SubjectCreateInput!): Subject!
  createOneTeacher(data: TeacherCreateInput!): Teacher!
  createOneUser(data: UserCreateInput!): User!
  deleteManyCity(where: CityWhereInput): BatchPayload!
  deleteManyFaq(where: FaqWhereInput): BatchPayload!
  deleteManyFeature(where: FeatureWhereInput): BatchPayload!
  deleteManyImage(where: ImageWhereInput): BatchPayload!
  deleteManyProgram(where: ProgramWhereInput): BatchPayload!
  deleteManySchool(where: SchoolWhereInput): BatchPayload!
  deleteManyStudent(where: StudentWhereInput): BatchPayload!
  deleteManySubject(where: SubjectWhereInput): BatchPayload!
  deleteManyTeacher(where: TeacherWhereInput): BatchPayload!
  deleteManyUser(where: UserWhereInput): BatchPayload!
  deleteOneCity(where: CityWhereUniqueInput!): City
  deleteOneFaq(where: FaqWhereUniqueInput!): Faq
  deleteOneFeature(where: FeatureWhereUniqueInput!): Feature
  deleteOneImage(where: ImageWhereUniqueInput!): Image
  deleteOneProgram(where: ProgramWhereUniqueInput!): Program
  deleteOneSchool(where: SchoolWhereUniqueInput!): School
  deleteOneStudent(where: StudentWhereUniqueInput!): Student
  deleteOneSubject(where: SubjectWhereUniqueInput!): Subject
  deleteOneTeacher(where: TeacherWhereUniqueInput!): Teacher
  deleteOneUser(where: UserWhereUniqueInput!): User
  login(email: String!, password: String!): User
  logout: Boolean
  signup(email: String!, name: String, password: String!): User
  updateField(data: UpdateFieldInput!, id: String!, modelId: String!): Field!
  updateManyCity(data: CityUpdateManyMutationInput!, where: CityWhereInput): BatchPayload!
  updateManyFaq(data: FaqUpdateManyMutationInput!, where: FaqWhereInput): BatchPayload!
  updateManyFeature(data: FeatureUpdateManyMutationInput!, where: FeatureWhereInput): BatchPayload!
  updateManyImage(data: ImageUpdateManyMutationInput!, where: ImageWhereInput): BatchPayload!
  updateManyProgram(data: ProgramUpdateManyMutationInput!, where: ProgramWhereInput): BatchPayload!
  updateManySchool(data: SchoolUpdateManyMutationInput!, where: SchoolWhereInput): BatchPayload!
  updateManyStudent(data: StudentUpdateManyMutationInput!, where: StudentWhereInput): BatchPayload!
  updateManySubject(data: SubjectUpdateManyMutationInput!, where: SubjectWhereInput): BatchPayload!
  updateManyTeacher(data: TeacherUpdateManyMutationInput!, where: TeacherWhereInput): BatchPayload!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateModel(data: UpdateModelInput!, id: String!): Model!
  updateOneCity(data: CityUpdateInput!, where: CityWhereUniqueInput!): City!
  updateOneFaq(data: FaqUpdateInput!, where: FaqWhereUniqueInput!): Faq!
  updateOneFeature(data: FeatureUpdateInput!, where: FeatureWhereUniqueInput!): Feature!
  updateOneImage(data: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image!
  updateOneProgram(data: ProgramUpdateInput!, where: ProgramWhereUniqueInput!): Program!
  updateOneSchool(data: SchoolUpdateInput!, where: SchoolWhereUniqueInput!): School!
  updateOneStudent(data: StudentUpdateInput!, where: StudentWhereUniqueInput!): Student!
  updateOneSubject(data: SubjectUpdateInput!, where: SubjectWhereUniqueInput!): Subject!
  updateOneTeacher(data: TeacherUpdateInput!, where: TeacherWhereUniqueInput!): Teacher!
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  updatePassword(currentPassword: String!, password: String!): Boolean
  upsertOneCity(create: CityCreateInput!, update: CityUpdateInput!, where: CityWhereUniqueInput!): City!
  upsertOneFaq(create: FaqCreateInput!, update: FaqUpdateInput!, where: FaqWhereUniqueInput!): Faq!
  upsertOneFeature(create: FeatureCreateInput!, update: FeatureUpdateInput!, where: FeatureWhereUniqueInput!): Feature!
  upsertOneImage(create: ImageCreateInput!, update: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image!
  upsertOneProgram(create: ProgramCreateInput!, update: ProgramUpdateInput!, where: ProgramWhereUniqueInput!): Program!
  upsertOneSchool(create: SchoolCreateInput!, update: SchoolUpdateInput!, where: SchoolWhereUniqueInput!): School!
  upsertOneStudent(create: StudentCreateInput!, update: StudentUpdateInput!, where: StudentWhereUniqueInput!): Student!
  upsertOneSubject(create: SubjectCreateInput!, update: SubjectUpdateInput!, where: SubjectWhereUniqueInput!): Subject!
  upsertOneTeacher(create: TeacherCreateInput!, update: TeacherUpdateInput!, where: TeacherWhereUniqueInput!): Teacher!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Program {
  createdAt: DateTime!
  descriptionEn: String!
  descriptionKz: String!
  descriptionRu: String!
  id: Int!
  school: School!
  schoolId: Int!
  titleEn: String!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime!
}

type ProgramAvgAggregateOutputType {
  id: Float
  schoolId: Float
}

input ProgramAvgOrderByAggregateInput {
  id: SortOrder
  schoolId: SortOrder
}

type ProgramCountAggregateOutputType {
  _all: Int!
  createdAt: Int!
  descriptionEn: Int!
  descriptionKz: Int!
  descriptionRu: Int!
  id: Int!
  schoolId: Int!
  titleEn: Int!
  titleKz: Int!
  titleRu: Int!
  updatedAt: Int!
}

input ProgramCountOrderByAggregateInput {
  createdAt: SortOrder
  descriptionEn: SortOrder
  descriptionKz: SortOrder
  descriptionRu: SortOrder
  id: SortOrder
  schoolId: SortOrder
  titleEn: SortOrder
  titleKz: SortOrder
  titleRu: SortOrder
  updatedAt: SortOrder
}

input ProgramCreateInput {
  createdAt: DateTime
  descriptionEn: String!
  descriptionKz: String!
  descriptionRu: String!
  school: SchoolCreateNestedOneWithoutProgramsInput!
  titleEn: String!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime
}

input ProgramCreateManyInput {
  createdAt: DateTime
  descriptionEn: String!
  descriptionKz: String!
  descriptionRu: String!
  id: Int
  schoolId: Int!
  titleEn: String!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime
}

input ProgramCreateManySchoolInput {
  createdAt: DateTime
  descriptionEn: String!
  descriptionKz: String!
  descriptionRu: String!
  id: Int
  titleEn: String!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime
}

input ProgramCreateManySchoolInputEnvelope {
  data: ProgramCreateManySchoolInput!
  skipDuplicates: Boolean
}

input ProgramCreateNestedManyWithoutSchoolInput {
  connect: [ProgramWhereUniqueInput]
  connectOrCreate: [ProgramCreateOrConnectWithoutSchoolInput]
  create: [ProgramCreateWithoutSchoolInput]
  createMany: ProgramCreateManySchoolInputEnvelope
}

input ProgramCreateOrConnectWithoutSchoolInput {
  create: ProgramUncheckedCreateWithoutSchoolInput!
  where: ProgramWhereUniqueInput!
}

input ProgramCreateWithoutSchoolInput {
  createdAt: DateTime
  descriptionEn: String!
  descriptionKz: String!
  descriptionRu: String!
  titleEn: String!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime
}

input ProgramListRelationFilter {
  every: ProgramWhereInput
  none: ProgramWhereInput
  some: ProgramWhereInput
}

type ProgramMaxAggregateOutputType {
  createdAt: DateTime
  descriptionEn: String
  descriptionKz: String
  descriptionRu: String
  id: Int
  schoolId: Int
  titleEn: String
  titleKz: String
  titleRu: String
  updatedAt: DateTime
}

input ProgramMaxOrderByAggregateInput {
  createdAt: SortOrder
  descriptionEn: SortOrder
  descriptionKz: SortOrder
  descriptionRu: SortOrder
  id: SortOrder
  schoolId: SortOrder
  titleEn: SortOrder
  titleKz: SortOrder
  titleRu: SortOrder
  updatedAt: SortOrder
}

type ProgramMinAggregateOutputType {
  createdAt: DateTime
  descriptionEn: String
  descriptionKz: String
  descriptionRu: String
  id: Int
  schoolId: Int
  titleEn: String
  titleKz: String
  titleRu: String
  updatedAt: DateTime
}

input ProgramMinOrderByAggregateInput {
  createdAt: SortOrder
  descriptionEn: SortOrder
  descriptionKz: SortOrder
  descriptionRu: SortOrder
  id: SortOrder
  schoolId: SortOrder
  titleEn: SortOrder
  titleKz: SortOrder
  titleRu: SortOrder
  updatedAt: SortOrder
}

input ProgramOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProgramOrderByWithAggregationInput {
  _avg: ProgramAvgOrderByAggregateInput
  _count: ProgramCountOrderByAggregateInput
  _max: ProgramMaxOrderByAggregateInput
  _min: ProgramMinOrderByAggregateInput
  _sum: ProgramSumOrderByAggregateInput
  createdAt: SortOrder
  descriptionEn: SortOrder
  descriptionKz: SortOrder
  descriptionRu: SortOrder
  id: SortOrder
  schoolId: SortOrder
  titleEn: SortOrder
  titleKz: SortOrder
  titleRu: SortOrder
  updatedAt: SortOrder
}

input ProgramOrderByWithRelationInput {
  createdAt: SortOrder
  descriptionEn: SortOrder
  descriptionKz: SortOrder
  descriptionRu: SortOrder
  id: SortOrder
  school: SchoolOrderByWithRelationInput
  schoolId: SortOrder
  titleEn: SortOrder
  titleKz: SortOrder
  titleRu: SortOrder
  updatedAt: SortOrder
}

enum ProgramScalarFieldEnum {
  createdAt
  descriptionEn
  descriptionKz
  descriptionRu
  id
  schoolId
  titleEn
  titleKz
  titleRu
  updatedAt
}

input ProgramScalarWhereInput {
  AND: [ProgramScalarWhereInput]
  NOT: [ProgramScalarWhereInput]
  OR: [ProgramScalarWhereInput]
  createdAt: DateTimeFilter
  descriptionEn: StringFilter
  descriptionKz: StringFilter
  descriptionRu: StringFilter
  id: IntFilter
  schoolId: IntFilter
  titleEn: StringFilter
  titleKz: StringFilter
  titleRu: StringFilter
  updatedAt: DateTimeFilter
}

input ProgramScalarWhereWithAggregatesInput {
  AND: [ProgramScalarWhereWithAggregatesInput]
  NOT: [ProgramScalarWhereWithAggregatesInput]
  OR: [ProgramScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  descriptionEn: StringWithAggregatesFilter
  descriptionKz: StringWithAggregatesFilter
  descriptionRu: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  schoolId: IntWithAggregatesFilter
  titleEn: StringWithAggregatesFilter
  titleKz: StringWithAggregatesFilter
  titleRu: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type ProgramSumAggregateOutputType {
  id: Int
  schoolId: Int
}

input ProgramSumOrderByAggregateInput {
  id: SortOrder
  schoolId: SortOrder
}

input ProgramUncheckedCreateInput {
  createdAt: DateTime
  descriptionEn: String!
  descriptionKz: String!
  descriptionRu: String!
  id: Int
  schoolId: Int!
  titleEn: String!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime
}

input ProgramUncheckedCreateNestedManyWithoutSchoolInput {
  connect: [ProgramWhereUniqueInput]
  connectOrCreate: [ProgramCreateOrConnectWithoutSchoolInput]
  create: [ProgramCreateWithoutSchoolInput]
  createMany: ProgramCreateManySchoolInputEnvelope
}

input ProgramUncheckedCreateWithoutSchoolInput {
  createdAt: DateTime
  descriptionEn: String!
  descriptionKz: String!
  descriptionRu: String!
  id: Int
  titleEn: String!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime
}

input ProgramUncheckedUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  descriptionEn: StringFieldUpdateOperationsInput
  descriptionKz: StringFieldUpdateOperationsInput
  descriptionRu: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  schoolId: IntFieldUpdateOperationsInput
  titleEn: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProgramUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  descriptionEn: StringFieldUpdateOperationsInput
  descriptionKz: StringFieldUpdateOperationsInput
  descriptionRu: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  schoolId: IntFieldUpdateOperationsInput
  titleEn: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProgramUncheckedUpdateManyWithoutProgramsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  descriptionEn: StringFieldUpdateOperationsInput
  descriptionKz: StringFieldUpdateOperationsInput
  descriptionRu: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  titleEn: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProgramUncheckedUpdateManyWithoutSchoolInput {
  connect: [ProgramWhereUniqueInput]
  connectOrCreate: [ProgramCreateOrConnectWithoutSchoolInput]
  create: [ProgramCreateWithoutSchoolInput]
  createMany: ProgramCreateManySchoolInputEnvelope
  delete: [ProgramWhereUniqueInput]
  deleteMany: [ProgramScalarWhereInput]
  disconnect: [ProgramWhereUniqueInput]
  set: [ProgramWhereUniqueInput]
  update: [ProgramUpdateWithWhereUniqueWithoutSchoolInput]
  updateMany: [ProgramUpdateManyWithWhereWithoutSchoolInput]
  upsert: [ProgramUpsertWithWhereUniqueWithoutSchoolInput]
}

input ProgramUncheckedUpdateWithoutSchoolInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  descriptionEn: StringFieldUpdateOperationsInput
  descriptionKz: StringFieldUpdateOperationsInput
  descriptionRu: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  titleEn: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProgramUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  descriptionEn: StringFieldUpdateOperationsInput
  descriptionKz: StringFieldUpdateOperationsInput
  descriptionRu: StringFieldUpdateOperationsInput
  school: SchoolUpdateOneRequiredWithoutProgramsInput
  titleEn: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProgramUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  descriptionEn: StringFieldUpdateOperationsInput
  descriptionKz: StringFieldUpdateOperationsInput
  descriptionRu: StringFieldUpdateOperationsInput
  titleEn: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProgramUpdateManyWithWhereWithoutSchoolInput {
  data: ProgramUncheckedUpdateManyWithoutProgramsInput!
  where: ProgramScalarWhereInput!
}

input ProgramUpdateManyWithoutSchoolInput {
  connect: [ProgramWhereUniqueInput]
  connectOrCreate: [ProgramCreateOrConnectWithoutSchoolInput]
  create: [ProgramCreateWithoutSchoolInput]
  createMany: ProgramCreateManySchoolInputEnvelope
  delete: [ProgramWhereUniqueInput]
  deleteMany: [ProgramScalarWhereInput]
  disconnect: [ProgramWhereUniqueInput]
  set: [ProgramWhereUniqueInput]
  update: [ProgramUpdateWithWhereUniqueWithoutSchoolInput]
  updateMany: [ProgramUpdateManyWithWhereWithoutSchoolInput]
  upsert: [ProgramUpsertWithWhereUniqueWithoutSchoolInput]
}

input ProgramUpdateWithWhereUniqueWithoutSchoolInput {
  data: ProgramUncheckedUpdateWithoutSchoolInput!
  where: ProgramWhereUniqueInput!
}

input ProgramUpdateWithoutSchoolInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  descriptionEn: StringFieldUpdateOperationsInput
  descriptionKz: StringFieldUpdateOperationsInput
  descriptionRu: StringFieldUpdateOperationsInput
  titleEn: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProgramUpsertWithWhereUniqueWithoutSchoolInput {
  create: ProgramUncheckedCreateWithoutSchoolInput!
  update: ProgramUncheckedUpdateWithoutSchoolInput!
  where: ProgramWhereUniqueInput!
}

input ProgramWhereInput {
  AND: [ProgramWhereInput]
  NOT: [ProgramWhereInput]
  OR: [ProgramWhereInput]
  createdAt: DateTimeFilter
  descriptionEn: StringFilter
  descriptionKz: StringFilter
  descriptionRu: StringFilter
  id: IntFilter
  school: SchoolWhereInput
  schoolId: IntFilter
  titleEn: StringFilter
  titleKz: StringFilter
  titleRu: StringFilter
  updatedAt: DateTimeFilter
}

input ProgramWhereUniqueInput {
  id: Int
}

type Query {
  aggregateCity(cursor: CityWhereUniqueInput, orderBy: [CityOrderByWithRelationInput], skip: Int, take: Int, where: CityWhereInput): AggregateCity
  aggregateFaq(cursor: FaqWhereUniqueInput, orderBy: [FaqOrderByWithRelationInput], skip: Int, take: Int, where: FaqWhereInput): AggregateFaq
  aggregateFeature(cursor: FeatureWhereUniqueInput, orderBy: [FeatureOrderByWithRelationInput], skip: Int, take: Int, where: FeatureWhereInput): AggregateFeature
  aggregateImage(cursor: ImageWhereUniqueInput, orderBy: [ImageOrderByWithRelationInput], skip: Int, take: Int, where: ImageWhereInput): AggregateImage
  aggregateProgram(cursor: ProgramWhereUniqueInput, orderBy: [ProgramOrderByWithRelationInput], skip: Int, take: Int, where: ProgramWhereInput): AggregateProgram
  aggregateSchool(cursor: SchoolWhereUniqueInput, orderBy: [SchoolOrderByWithRelationInput], skip: Int, take: Int, where: SchoolWhereInput): AggregateSchool
  aggregateStudent(cursor: StudentWhereUniqueInput, orderBy: [StudentOrderByWithRelationInput], skip: Int, take: Int, where: StudentWhereInput): AggregateStudent
  aggregateSubject(cursor: SubjectWhereUniqueInput, orderBy: [SubjectOrderByWithRelationInput], skip: Int, take: Int, where: SubjectWhereInput): AggregateSubject
  aggregateTeacher(cursor: TeacherWhereUniqueInput, orderBy: [TeacherOrderByWithRelationInput], skip: Int, take: Int, where: TeacherWhereInput): AggregateTeacher
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput], skip: Int, take: Int, where: UserWhereInput): AggregateUser
  findFirstCity(cursor: CityWhereUniqueInput, distinct: [CityScalarFieldEnum], orderBy: [CityOrderByWithRelationInput], skip: Int, take: Int, where: CityWhereInput): City
  findFirstFaq(cursor: FaqWhereUniqueInput, distinct: [FaqScalarFieldEnum], orderBy: [FaqOrderByWithRelationInput], skip: Int, take: Int, where: FaqWhereInput): Faq
  findFirstFeature(cursor: FeatureWhereUniqueInput, distinct: [FeatureScalarFieldEnum], orderBy: [FeatureOrderByWithRelationInput], skip: Int, take: Int, where: FeatureWhereInput): Feature
  findFirstImage(cursor: ImageWhereUniqueInput, distinct: [ImageScalarFieldEnum], orderBy: [ImageOrderByWithRelationInput], skip: Int, take: Int, where: ImageWhereInput): Image
  findFirstProgram(cursor: ProgramWhereUniqueInput, distinct: [ProgramScalarFieldEnum], orderBy: [ProgramOrderByWithRelationInput], skip: Int, take: Int, where: ProgramWhereInput): Program
  findFirstSchool(cursor: SchoolWhereUniqueInput, distinct: [SchoolScalarFieldEnum], orderBy: [SchoolOrderByWithRelationInput], skip: Int, take: Int, where: SchoolWhereInput): School
  findFirstStudent(cursor: StudentWhereUniqueInput, distinct: [StudentScalarFieldEnum], orderBy: [StudentOrderByWithRelationInput], skip: Int, take: Int, where: StudentWhereInput): Student
  findFirstSubject(cursor: SubjectWhereUniqueInput, distinct: [SubjectScalarFieldEnum], orderBy: [SubjectOrderByWithRelationInput], skip: Int, take: Int, where: SubjectWhereInput): Subject
  findFirstTeacher(cursor: TeacherWhereUniqueInput, distinct: [TeacherScalarFieldEnum], orderBy: [TeacherOrderByWithRelationInput], skip: Int, take: Int, where: TeacherWhereInput): Teacher
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum], orderBy: [UserOrderByWithRelationInput], skip: Int, take: Int, where: UserWhereInput): User
  findManyCity(cursor: CityWhereUniqueInput, distinct: [CityScalarFieldEnum], orderBy: [CityOrderByWithRelationInput], skip: Int, take: Int, where: CityWhereInput): [City!]!
  findManyCityCount(cursor: CityWhereUniqueInput, distinct: [CityScalarFieldEnum], orderBy: [CityOrderByWithRelationInput], skip: Int, take: Int, where: CityWhereInput): Int!
  findManyFaq(cursor: FaqWhereUniqueInput, distinct: [FaqScalarFieldEnum], orderBy: [FaqOrderByWithRelationInput], skip: Int, take: Int, where: FaqWhereInput): [Faq!]!
  findManyFaqCount(cursor: FaqWhereUniqueInput, distinct: [FaqScalarFieldEnum], orderBy: [FaqOrderByWithRelationInput], skip: Int, take: Int, where: FaqWhereInput): Int!
  findManyFeature(cursor: FeatureWhereUniqueInput, distinct: [FeatureScalarFieldEnum], orderBy: [FeatureOrderByWithRelationInput], skip: Int, take: Int, where: FeatureWhereInput): [Feature!]!
  findManyFeatureCount(cursor: FeatureWhereUniqueInput, distinct: [FeatureScalarFieldEnum], orderBy: [FeatureOrderByWithRelationInput], skip: Int, take: Int, where: FeatureWhereInput): Int!
  findManyImage(cursor: ImageWhereUniqueInput, distinct: [ImageScalarFieldEnum], orderBy: [ImageOrderByWithRelationInput], skip: Int, take: Int, where: ImageWhereInput): [Image!]!
  findManyImageCount(cursor: ImageWhereUniqueInput, distinct: [ImageScalarFieldEnum], orderBy: [ImageOrderByWithRelationInput], skip: Int, take: Int, where: ImageWhereInput): Int!
  findManyProgram(cursor: ProgramWhereUniqueInput, distinct: [ProgramScalarFieldEnum], orderBy: [ProgramOrderByWithRelationInput], skip: Int, take: Int, where: ProgramWhereInput): [Program!]!
  findManyProgramCount(cursor: ProgramWhereUniqueInput, distinct: [ProgramScalarFieldEnum], orderBy: [ProgramOrderByWithRelationInput], skip: Int, take: Int, where: ProgramWhereInput): Int!
  findManySchool(cursor: SchoolWhereUniqueInput, distinct: [SchoolScalarFieldEnum], orderBy: [SchoolOrderByWithRelationInput], skip: Int, take: Int, where: SchoolWhereInput): [School!]!
  findManySchoolCount(cursor: SchoolWhereUniqueInput, distinct: [SchoolScalarFieldEnum], orderBy: [SchoolOrderByWithRelationInput], skip: Int, take: Int, where: SchoolWhereInput): Int!
  findManyStudent(cursor: StudentWhereUniqueInput, distinct: [StudentScalarFieldEnum], orderBy: [StudentOrderByWithRelationInput], skip: Int, take: Int, where: StudentWhereInput): [Student!]!
  findManyStudentCount(cursor: StudentWhereUniqueInput, distinct: [StudentScalarFieldEnum], orderBy: [StudentOrderByWithRelationInput], skip: Int, take: Int, where: StudentWhereInput): Int!
  findManySubject(cursor: SubjectWhereUniqueInput, distinct: [SubjectScalarFieldEnum], orderBy: [SubjectOrderByWithRelationInput], skip: Int, take: Int, where: SubjectWhereInput): [Subject!]!
  findManySubjectCount(cursor: SubjectWhereUniqueInput, distinct: [SubjectScalarFieldEnum], orderBy: [SubjectOrderByWithRelationInput], skip: Int, take: Int, where: SubjectWhereInput): Int!
  findManyTeacher(cursor: TeacherWhereUniqueInput, distinct: [TeacherScalarFieldEnum], orderBy: [TeacherOrderByWithRelationInput], skip: Int, take: Int, where: TeacherWhereInput): [Teacher!]!
  findManyTeacherCount(cursor: TeacherWhereUniqueInput, distinct: [TeacherScalarFieldEnum], orderBy: [TeacherOrderByWithRelationInput], skip: Int, take: Int, where: TeacherWhereInput): Int!
  findManyUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum], orderBy: [UserOrderByWithRelationInput], skip: Int, take: Int, where: UserWhereInput): [User!]!
  findManyUserCount(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum], orderBy: [UserOrderByWithRelationInput], skip: Int, take: Int, where: UserWhereInput): Int!
  findUniqueCity(where: CityWhereUniqueInput!): City
  findUniqueFaq(where: FaqWhereUniqueInput!): Faq
  findUniqueFeature(where: FeatureWhereUniqueInput!): Feature
  findUniqueImage(where: ImageWhereUniqueInput!): Image
  findUniqueProgram(where: ProgramWhereUniqueInput!): Program
  findUniqueSchool(where: SchoolWhereUniqueInput!): School
  findUniqueStudent(where: StudentWhereUniqueInput!): Student
  findUniqueSubject(where: SubjectWhereUniqueInput!): Subject
  findUniqueTeacher(where: TeacherWhereUniqueInput!): Teacher
  findUniqueUser(where: UserWhereUniqueInput!): User
  getSchema: Schema!
  me: User
}

enum QueryMode {
  default
  insensitive
}

type Schema {
  enums: [Enum!]!
  models: [Model!]!
}

type School {
  _count: SchoolCountOutputType
  city: City!
  cityId: Int!
  createdAt: DateTime!
  descriptionEn: String!
  descriptionKz: String!
  descriptionRu: String!
  id: Int!
  programs(cursor: ProgramWhereUniqueInput, distinct: ProgramScalarFieldEnum, orderBy: ProgramOrderByWithRelationInput, skip: Int, take: Int, where: ProgramWhereInput): [Program!]!
  students(cursor: StudentWhereUniqueInput, distinct: StudentScalarFieldEnum, orderBy: StudentOrderByWithRelationInput, skip: Int, take: Int, where: StudentWhereInput): [Student!]!
  titleEn: String!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime!
}

type SchoolAvgAggregateOutputType {
  cityId: Float
  id: Float
}

input SchoolAvgOrderByAggregateInput {
  cityId: SortOrder
  id: SortOrder
}

type SchoolCountAggregateOutputType {
  _all: Int!
  cityId: Int!
  createdAt: Int!
  descriptionEn: Int!
  descriptionKz: Int!
  descriptionRu: Int!
  id: Int!
  titleEn: Int!
  titleKz: Int!
  titleRu: Int!
  updatedAt: Int!
}

input SchoolCountOrderByAggregateInput {
  cityId: SortOrder
  createdAt: SortOrder
  descriptionEn: SortOrder
  descriptionKz: SortOrder
  descriptionRu: SortOrder
  id: SortOrder
  titleEn: SortOrder
  titleKz: SortOrder
  titleRu: SortOrder
  updatedAt: SortOrder
}

type SchoolCountOutputType {
  programs: Int!
  students: Int!
}

input SchoolCreateInput {
  city: CityCreateNestedOneWithoutSchoolsInput!
  createdAt: DateTime
  descriptionEn: String!
  descriptionKz: String!
  descriptionRu: String!
  programs: ProgramCreateNestedManyWithoutSchoolInput
  students: StudentCreateNestedManyWithoutSchoolInput
  titleEn: String!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime
}

input SchoolCreateManyCityInput {
  createdAt: DateTime
  descriptionEn: String!
  descriptionKz: String!
  descriptionRu: String!
  id: Int
  titleEn: String!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime
}

input SchoolCreateManyCityInputEnvelope {
  data: SchoolCreateManyCityInput!
  skipDuplicates: Boolean
}

input SchoolCreateManyInput {
  cityId: Int!
  createdAt: DateTime
  descriptionEn: String!
  descriptionKz: String!
  descriptionRu: String!
  id: Int
  titleEn: String!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime
}

input SchoolCreateNestedManyWithoutCityInput {
  connect: [SchoolWhereUniqueInput]
  connectOrCreate: [SchoolCreateOrConnectWithoutCityInput]
  create: [SchoolCreateWithoutCityInput]
  createMany: SchoolCreateManyCityInputEnvelope
}

input SchoolCreateNestedOneWithoutProgramsInput {
  connect: SchoolWhereUniqueInput
  connectOrCreate: SchoolCreateOrConnectWithoutProgramsInput
  create: SchoolUncheckedCreateWithoutProgramsInput
}

input SchoolCreateNestedOneWithoutStudentsInput {
  connect: SchoolWhereUniqueInput
  connectOrCreate: SchoolCreateOrConnectWithoutStudentsInput
  create: SchoolUncheckedCreateWithoutStudentsInput
}

input SchoolCreateOrConnectWithoutCityInput {
  create: SchoolUncheckedCreateWithoutCityInput!
  where: SchoolWhereUniqueInput!
}

input SchoolCreateOrConnectWithoutProgramsInput {
  create: SchoolUncheckedCreateWithoutProgramsInput!
  where: SchoolWhereUniqueInput!
}

input SchoolCreateOrConnectWithoutStudentsInput {
  create: SchoolUncheckedCreateWithoutStudentsInput!
  where: SchoolWhereUniqueInput!
}

input SchoolCreateWithoutCityInput {
  createdAt: DateTime
  descriptionEn: String!
  descriptionKz: String!
  descriptionRu: String!
  programs: ProgramCreateNestedManyWithoutSchoolInput
  students: StudentCreateNestedManyWithoutSchoolInput
  titleEn: String!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime
}

input SchoolCreateWithoutProgramsInput {
  city: CityCreateNestedOneWithoutSchoolsInput!
  createdAt: DateTime
  descriptionEn: String!
  descriptionKz: String!
  descriptionRu: String!
  students: StudentCreateNestedManyWithoutSchoolInput
  titleEn: String!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime
}

input SchoolCreateWithoutStudentsInput {
  city: CityCreateNestedOneWithoutSchoolsInput!
  createdAt: DateTime
  descriptionEn: String!
  descriptionKz: String!
  descriptionRu: String!
  programs: ProgramCreateNestedManyWithoutSchoolInput
  titleEn: String!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime
}

input SchoolListRelationFilter {
  every: SchoolWhereInput
  none: SchoolWhereInput
  some: SchoolWhereInput
}

type SchoolMaxAggregateOutputType {
  cityId: Int
  createdAt: DateTime
  descriptionEn: String
  descriptionKz: String
  descriptionRu: String
  id: Int
  titleEn: String
  titleKz: String
  titleRu: String
  updatedAt: DateTime
}

input SchoolMaxOrderByAggregateInput {
  cityId: SortOrder
  createdAt: SortOrder
  descriptionEn: SortOrder
  descriptionKz: SortOrder
  descriptionRu: SortOrder
  id: SortOrder
  titleEn: SortOrder
  titleKz: SortOrder
  titleRu: SortOrder
  updatedAt: SortOrder
}

type SchoolMinAggregateOutputType {
  cityId: Int
  createdAt: DateTime
  descriptionEn: String
  descriptionKz: String
  descriptionRu: String
  id: Int
  titleEn: String
  titleKz: String
  titleRu: String
  updatedAt: DateTime
}

input SchoolMinOrderByAggregateInput {
  cityId: SortOrder
  createdAt: SortOrder
  descriptionEn: SortOrder
  descriptionKz: SortOrder
  descriptionRu: SortOrder
  id: SortOrder
  titleEn: SortOrder
  titleKz: SortOrder
  titleRu: SortOrder
  updatedAt: SortOrder
}

input SchoolOrderByRelationAggregateInput {
  _count: SortOrder
}

input SchoolOrderByWithAggregationInput {
  _avg: SchoolAvgOrderByAggregateInput
  _count: SchoolCountOrderByAggregateInput
  _max: SchoolMaxOrderByAggregateInput
  _min: SchoolMinOrderByAggregateInput
  _sum: SchoolSumOrderByAggregateInput
  cityId: SortOrder
  createdAt: SortOrder
  descriptionEn: SortOrder
  descriptionKz: SortOrder
  descriptionRu: SortOrder
  id: SortOrder
  titleEn: SortOrder
  titleKz: SortOrder
  titleRu: SortOrder
  updatedAt: SortOrder
}

input SchoolOrderByWithRelationInput {
  city: CityOrderByWithRelationInput
  cityId: SortOrder
  createdAt: SortOrder
  descriptionEn: SortOrder
  descriptionKz: SortOrder
  descriptionRu: SortOrder
  id: SortOrder
  programs: ProgramOrderByRelationAggregateInput
  students: StudentOrderByRelationAggregateInput
  titleEn: SortOrder
  titleKz: SortOrder
  titleRu: SortOrder
  updatedAt: SortOrder
}

input SchoolRelationFilter {
  is: SchoolWhereInput
  isNot: SchoolWhereInput
}

enum SchoolScalarFieldEnum {
  cityId
  createdAt
  descriptionEn
  descriptionKz
  descriptionRu
  id
  titleEn
  titleKz
  titleRu
  updatedAt
}

input SchoolScalarWhereInput {
  AND: [SchoolScalarWhereInput]
  NOT: [SchoolScalarWhereInput]
  OR: [SchoolScalarWhereInput]
  cityId: IntFilter
  createdAt: DateTimeFilter
  descriptionEn: StringFilter
  descriptionKz: StringFilter
  descriptionRu: StringFilter
  id: IntFilter
  titleEn: StringFilter
  titleKz: StringFilter
  titleRu: StringFilter
  updatedAt: DateTimeFilter
}

input SchoolScalarWhereWithAggregatesInput {
  AND: [SchoolScalarWhereWithAggregatesInput]
  NOT: [SchoolScalarWhereWithAggregatesInput]
  OR: [SchoolScalarWhereWithAggregatesInput]
  cityId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  descriptionEn: StringWithAggregatesFilter
  descriptionKz: StringWithAggregatesFilter
  descriptionRu: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  titleEn: StringWithAggregatesFilter
  titleKz: StringWithAggregatesFilter
  titleRu: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type SchoolSumAggregateOutputType {
  cityId: Int
  id: Int
}

input SchoolSumOrderByAggregateInput {
  cityId: SortOrder
  id: SortOrder
}

input SchoolUncheckedCreateInput {
  cityId: Int!
  createdAt: DateTime
  descriptionEn: String!
  descriptionKz: String!
  descriptionRu: String!
  id: Int
  programs: ProgramUncheckedCreateNestedManyWithoutSchoolInput
  students: StudentUncheckedCreateNestedManyWithoutSchoolInput
  titleEn: String!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime
}

input SchoolUncheckedCreateNestedManyWithoutCityInput {
  connect: [SchoolWhereUniqueInput]
  connectOrCreate: [SchoolCreateOrConnectWithoutCityInput]
  create: [SchoolCreateWithoutCityInput]
  createMany: SchoolCreateManyCityInputEnvelope
}

input SchoolUncheckedCreateWithoutCityInput {
  createdAt: DateTime
  descriptionEn: String!
  descriptionKz: String!
  descriptionRu: String!
  id: Int
  programs: ProgramUncheckedCreateNestedManyWithoutSchoolInput
  students: StudentUncheckedCreateNestedManyWithoutSchoolInput
  titleEn: String!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime
}

input SchoolUncheckedCreateWithoutProgramsInput {
  cityId: Int!
  createdAt: DateTime
  descriptionEn: String!
  descriptionKz: String!
  descriptionRu: String!
  id: Int
  students: StudentUncheckedCreateNestedManyWithoutSchoolInput
  titleEn: String!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime
}

input SchoolUncheckedCreateWithoutStudentsInput {
  cityId: Int!
  createdAt: DateTime
  descriptionEn: String!
  descriptionKz: String!
  descriptionRu: String!
  id: Int
  programs: ProgramUncheckedCreateNestedManyWithoutSchoolInput
  titleEn: String!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime
}

input SchoolUncheckedUpdateInput {
  cityId: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  descriptionEn: StringFieldUpdateOperationsInput
  descriptionKz: StringFieldUpdateOperationsInput
  descriptionRu: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  programs: ProgramUncheckedUpdateManyWithoutSchoolInput
  students: StudentUncheckedUpdateManyWithoutSchoolInput
  titleEn: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SchoolUncheckedUpdateManyInput {
  cityId: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  descriptionEn: StringFieldUpdateOperationsInput
  descriptionKz: StringFieldUpdateOperationsInput
  descriptionRu: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  titleEn: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SchoolUncheckedUpdateManyWithoutCityInput {
  connect: [SchoolWhereUniqueInput]
  connectOrCreate: [SchoolCreateOrConnectWithoutCityInput]
  create: [SchoolCreateWithoutCityInput]
  createMany: SchoolCreateManyCityInputEnvelope
  delete: [SchoolWhereUniqueInput]
  deleteMany: [SchoolScalarWhereInput]
  disconnect: [SchoolWhereUniqueInput]
  set: [SchoolWhereUniqueInput]
  update: [SchoolUpdateWithWhereUniqueWithoutCityInput]
  updateMany: [SchoolUpdateManyWithWhereWithoutCityInput]
  upsert: [SchoolUpsertWithWhereUniqueWithoutCityInput]
}

input SchoolUncheckedUpdateManyWithoutSchoolsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  descriptionEn: StringFieldUpdateOperationsInput
  descriptionKz: StringFieldUpdateOperationsInput
  descriptionRu: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  titleEn: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SchoolUncheckedUpdateWithoutCityInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  descriptionEn: StringFieldUpdateOperationsInput
  descriptionKz: StringFieldUpdateOperationsInput
  descriptionRu: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  programs: ProgramUncheckedUpdateManyWithoutSchoolInput
  students: StudentUncheckedUpdateManyWithoutSchoolInput
  titleEn: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SchoolUncheckedUpdateWithoutProgramsInput {
  cityId: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  descriptionEn: StringFieldUpdateOperationsInput
  descriptionKz: StringFieldUpdateOperationsInput
  descriptionRu: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  students: StudentUncheckedUpdateManyWithoutSchoolInput
  titleEn: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SchoolUncheckedUpdateWithoutStudentsInput {
  cityId: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  descriptionEn: StringFieldUpdateOperationsInput
  descriptionKz: StringFieldUpdateOperationsInput
  descriptionRu: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  programs: ProgramUncheckedUpdateManyWithoutSchoolInput
  titleEn: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SchoolUpdateInput {
  city: CityUpdateOneRequiredWithoutSchoolsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  descriptionEn: StringFieldUpdateOperationsInput
  descriptionKz: StringFieldUpdateOperationsInput
  descriptionRu: StringFieldUpdateOperationsInput
  programs: ProgramUpdateManyWithoutSchoolInput
  students: StudentUpdateManyWithoutSchoolInput
  titleEn: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SchoolUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  descriptionEn: StringFieldUpdateOperationsInput
  descriptionKz: StringFieldUpdateOperationsInput
  descriptionRu: StringFieldUpdateOperationsInput
  titleEn: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SchoolUpdateManyWithWhereWithoutCityInput {
  data: SchoolUncheckedUpdateManyWithoutSchoolsInput!
  where: SchoolScalarWhereInput!
}

input SchoolUpdateManyWithoutCityInput {
  connect: [SchoolWhereUniqueInput]
  connectOrCreate: [SchoolCreateOrConnectWithoutCityInput]
  create: [SchoolCreateWithoutCityInput]
  createMany: SchoolCreateManyCityInputEnvelope
  delete: [SchoolWhereUniqueInput]
  deleteMany: [SchoolScalarWhereInput]
  disconnect: [SchoolWhereUniqueInput]
  set: [SchoolWhereUniqueInput]
  update: [SchoolUpdateWithWhereUniqueWithoutCityInput]
  updateMany: [SchoolUpdateManyWithWhereWithoutCityInput]
  upsert: [SchoolUpsertWithWhereUniqueWithoutCityInput]
}

input SchoolUpdateOneRequiredWithoutProgramsInput {
  connect: SchoolWhereUniqueInput
  connectOrCreate: SchoolCreateOrConnectWithoutProgramsInput
  create: SchoolUncheckedCreateWithoutProgramsInput
  update: SchoolUncheckedUpdateWithoutProgramsInput
  upsert: SchoolUpsertWithoutProgramsInput
}

input SchoolUpdateOneRequiredWithoutStudentsInput {
  connect: SchoolWhereUniqueInput
  connectOrCreate: SchoolCreateOrConnectWithoutStudentsInput
  create: SchoolUncheckedCreateWithoutStudentsInput
  update: SchoolUncheckedUpdateWithoutStudentsInput
  upsert: SchoolUpsertWithoutStudentsInput
}

input SchoolUpdateWithWhereUniqueWithoutCityInput {
  data: SchoolUncheckedUpdateWithoutCityInput!
  where: SchoolWhereUniqueInput!
}

input SchoolUpdateWithoutCityInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  descriptionEn: StringFieldUpdateOperationsInput
  descriptionKz: StringFieldUpdateOperationsInput
  descriptionRu: StringFieldUpdateOperationsInput
  programs: ProgramUpdateManyWithoutSchoolInput
  students: StudentUpdateManyWithoutSchoolInput
  titleEn: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SchoolUpdateWithoutProgramsInput {
  city: CityUpdateOneRequiredWithoutSchoolsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  descriptionEn: StringFieldUpdateOperationsInput
  descriptionKz: StringFieldUpdateOperationsInput
  descriptionRu: StringFieldUpdateOperationsInput
  students: StudentUpdateManyWithoutSchoolInput
  titleEn: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SchoolUpdateWithoutStudentsInput {
  city: CityUpdateOneRequiredWithoutSchoolsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  descriptionEn: StringFieldUpdateOperationsInput
  descriptionKz: StringFieldUpdateOperationsInput
  descriptionRu: StringFieldUpdateOperationsInput
  programs: ProgramUpdateManyWithoutSchoolInput
  titleEn: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SchoolUpsertWithWhereUniqueWithoutCityInput {
  create: SchoolUncheckedCreateWithoutCityInput!
  update: SchoolUncheckedUpdateWithoutCityInput!
  where: SchoolWhereUniqueInput!
}

input SchoolUpsertWithoutProgramsInput {
  create: SchoolUncheckedCreateWithoutProgramsInput!
  update: SchoolUncheckedUpdateWithoutProgramsInput!
}

input SchoolUpsertWithoutStudentsInput {
  create: SchoolUncheckedCreateWithoutStudentsInput!
  update: SchoolUncheckedUpdateWithoutStudentsInput!
}

input SchoolWhereInput {
  AND: [SchoolWhereInput]
  NOT: [SchoolWhereInput]
  OR: [SchoolWhereInput]
  city: CityWhereInput
  cityId: IntFilter
  createdAt: DateTimeFilter
  descriptionEn: StringFilter
  descriptionKz: StringFilter
  descriptionRu: StringFilter
  id: IntFilter
  programs: ProgramListRelationFilter
  students: StudentListRelationFilter
  titleEn: StringFilter
  titleKz: StringFilter
  titleRu: StringFilter
  updatedAt: DateTimeFilter
}

input SchoolWhereUniqueInput {
  id: Int
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

type Student {
  _count: StudentCountOutputType
  createdAt: DateTime!
  dateOfFinish: DateTime!
  firstName: String!
  id: Int!
  images(cursor: ImageWhereUniqueInput, distinct: ImageScalarFieldEnum, orderBy: ImageOrderByWithRelationInput, skip: Int, take: Int, where: ImageWhereInput): [Image!]!
  lastName: String!
  school: School!
  schoolId: Int!
  updatedAt: DateTime!
}

type StudentAvgAggregateOutputType {
  id: Float
  schoolId: Float
}

input StudentAvgOrderByAggregateInput {
  id: SortOrder
  schoolId: SortOrder
}

type StudentCountAggregateOutputType {
  _all: Int!
  createdAt: Int!
  dateOfFinish: Int!
  firstName: Int!
  id: Int!
  lastName: Int!
  schoolId: Int!
  updatedAt: Int!
}

input StudentCountOrderByAggregateInput {
  createdAt: SortOrder
  dateOfFinish: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  schoolId: SortOrder
  updatedAt: SortOrder
}

type StudentCountOutputType {
  images: Int!
}

input StudentCreateInput {
  createdAt: DateTime
  dateOfFinish: DateTime!
  firstName: String!
  images: ImageCreateNestedManyWithoutStudentInput
  lastName: String!
  school: SchoolCreateNestedOneWithoutStudentsInput!
  updatedAt: DateTime
}

input StudentCreateManyInput {
  createdAt: DateTime
  dateOfFinish: DateTime!
  firstName: String!
  id: Int
  lastName: String!
  schoolId: Int!
  updatedAt: DateTime
}

input StudentCreateManySchoolInput {
  createdAt: DateTime
  dateOfFinish: DateTime!
  firstName: String!
  id: Int
  lastName: String!
  updatedAt: DateTime
}

input StudentCreateManySchoolInputEnvelope {
  data: StudentCreateManySchoolInput!
  skipDuplicates: Boolean
}

input StudentCreateNestedManyWithoutSchoolInput {
  connect: [StudentWhereUniqueInput]
  connectOrCreate: [StudentCreateOrConnectWithoutSchoolInput]
  create: [StudentCreateWithoutSchoolInput]
  createMany: StudentCreateManySchoolInputEnvelope
}

input StudentCreateNestedOneWithoutImagesInput {
  connect: StudentWhereUniqueInput
  connectOrCreate: StudentCreateOrConnectWithoutImagesInput
  create: StudentUncheckedCreateWithoutImagesInput
}

input StudentCreateOrConnectWithoutImagesInput {
  create: StudentUncheckedCreateWithoutImagesInput!
  where: StudentWhereUniqueInput!
}

input StudentCreateOrConnectWithoutSchoolInput {
  create: StudentUncheckedCreateWithoutSchoolInput!
  where: StudentWhereUniqueInput!
}

input StudentCreateWithoutImagesInput {
  createdAt: DateTime
  dateOfFinish: DateTime!
  firstName: String!
  lastName: String!
  school: SchoolCreateNestedOneWithoutStudentsInput!
  updatedAt: DateTime
}

input StudentCreateWithoutSchoolInput {
  createdAt: DateTime
  dateOfFinish: DateTime!
  firstName: String!
  images: ImageCreateNestedManyWithoutStudentInput
  lastName: String!
  updatedAt: DateTime
}

input StudentListRelationFilter {
  every: StudentWhereInput
  none: StudentWhereInput
  some: StudentWhereInput
}

type StudentMaxAggregateOutputType {
  createdAt: DateTime
  dateOfFinish: DateTime
  firstName: String
  id: Int
  lastName: String
  schoolId: Int
  updatedAt: DateTime
}

input StudentMaxOrderByAggregateInput {
  createdAt: SortOrder
  dateOfFinish: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  schoolId: SortOrder
  updatedAt: SortOrder
}

type StudentMinAggregateOutputType {
  createdAt: DateTime
  dateOfFinish: DateTime
  firstName: String
  id: Int
  lastName: String
  schoolId: Int
  updatedAt: DateTime
}

input StudentMinOrderByAggregateInput {
  createdAt: SortOrder
  dateOfFinish: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  schoolId: SortOrder
  updatedAt: SortOrder
}

input StudentOrderByRelationAggregateInput {
  _count: SortOrder
}

input StudentOrderByWithAggregationInput {
  _avg: StudentAvgOrderByAggregateInput
  _count: StudentCountOrderByAggregateInput
  _max: StudentMaxOrderByAggregateInput
  _min: StudentMinOrderByAggregateInput
  _sum: StudentSumOrderByAggregateInput
  createdAt: SortOrder
  dateOfFinish: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  schoolId: SortOrder
  updatedAt: SortOrder
}

input StudentOrderByWithRelationInput {
  createdAt: SortOrder
  dateOfFinish: SortOrder
  firstName: SortOrder
  id: SortOrder
  images: ImageOrderByRelationAggregateInput
  lastName: SortOrder
  school: SchoolOrderByWithRelationInput
  schoolId: SortOrder
  updatedAt: SortOrder
}

input StudentRelationFilter {
  is: StudentWhereInput
  isNot: StudentWhereInput
}

enum StudentScalarFieldEnum {
  createdAt
  dateOfFinish
  firstName
  id
  lastName
  schoolId
  updatedAt
}

input StudentScalarWhereInput {
  AND: [StudentScalarWhereInput]
  NOT: [StudentScalarWhereInput]
  OR: [StudentScalarWhereInput]
  createdAt: DateTimeFilter
  dateOfFinish: DateTimeFilter
  firstName: StringFilter
  id: IntFilter
  lastName: StringFilter
  schoolId: IntFilter
  updatedAt: DateTimeFilter
}

input StudentScalarWhereWithAggregatesInput {
  AND: [StudentScalarWhereWithAggregatesInput]
  NOT: [StudentScalarWhereWithAggregatesInput]
  OR: [StudentScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  dateOfFinish: DateTimeWithAggregatesFilter
  firstName: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  lastName: StringWithAggregatesFilter
  schoolId: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type StudentSumAggregateOutputType {
  id: Int
  schoolId: Int
}

input StudentSumOrderByAggregateInput {
  id: SortOrder
  schoolId: SortOrder
}

input StudentUncheckedCreateInput {
  createdAt: DateTime
  dateOfFinish: DateTime!
  firstName: String!
  id: Int
  images: ImageUncheckedCreateNestedManyWithoutStudentInput
  lastName: String!
  schoolId: Int!
  updatedAt: DateTime
}

input StudentUncheckedCreateNestedManyWithoutSchoolInput {
  connect: [StudentWhereUniqueInput]
  connectOrCreate: [StudentCreateOrConnectWithoutSchoolInput]
  create: [StudentCreateWithoutSchoolInput]
  createMany: StudentCreateManySchoolInputEnvelope
}

input StudentUncheckedCreateWithoutImagesInput {
  createdAt: DateTime
  dateOfFinish: DateTime!
  firstName: String!
  id: Int
  lastName: String!
  schoolId: Int!
  updatedAt: DateTime
}

input StudentUncheckedCreateWithoutSchoolInput {
  createdAt: DateTime
  dateOfFinish: DateTime!
  firstName: String!
  id: Int
  images: ImageUncheckedCreateNestedManyWithoutStudentInput
  lastName: String!
  updatedAt: DateTime
}

input StudentUncheckedUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  dateOfFinish: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  images: ImageUncheckedUpdateManyWithoutStudentInput
  lastName: StringFieldUpdateOperationsInput
  schoolId: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StudentUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  dateOfFinish: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  schoolId: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StudentUncheckedUpdateManyWithoutSchoolInput {
  connect: [StudentWhereUniqueInput]
  connectOrCreate: [StudentCreateOrConnectWithoutSchoolInput]
  create: [StudentCreateWithoutSchoolInput]
  createMany: StudentCreateManySchoolInputEnvelope
  delete: [StudentWhereUniqueInput]
  deleteMany: [StudentScalarWhereInput]
  disconnect: [StudentWhereUniqueInput]
  set: [StudentWhereUniqueInput]
  update: [StudentUpdateWithWhereUniqueWithoutSchoolInput]
  updateMany: [StudentUpdateManyWithWhereWithoutSchoolInput]
  upsert: [StudentUpsertWithWhereUniqueWithoutSchoolInput]
}

input StudentUncheckedUpdateManyWithoutStudentsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  dateOfFinish: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StudentUncheckedUpdateWithoutImagesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  dateOfFinish: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  schoolId: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StudentUncheckedUpdateWithoutSchoolInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  dateOfFinish: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  images: ImageUncheckedUpdateManyWithoutStudentInput
  lastName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StudentUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  dateOfFinish: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutStudentInput
  lastName: StringFieldUpdateOperationsInput
  school: SchoolUpdateOneRequiredWithoutStudentsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StudentUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  dateOfFinish: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StudentUpdateManyWithWhereWithoutSchoolInput {
  data: StudentUncheckedUpdateManyWithoutStudentsInput!
  where: StudentScalarWhereInput!
}

input StudentUpdateManyWithoutSchoolInput {
  connect: [StudentWhereUniqueInput]
  connectOrCreate: [StudentCreateOrConnectWithoutSchoolInput]
  create: [StudentCreateWithoutSchoolInput]
  createMany: StudentCreateManySchoolInputEnvelope
  delete: [StudentWhereUniqueInput]
  deleteMany: [StudentScalarWhereInput]
  disconnect: [StudentWhereUniqueInput]
  set: [StudentWhereUniqueInput]
  update: [StudentUpdateWithWhereUniqueWithoutSchoolInput]
  updateMany: [StudentUpdateManyWithWhereWithoutSchoolInput]
  upsert: [StudentUpsertWithWhereUniqueWithoutSchoolInput]
}

input StudentUpdateOneWithoutImagesInput {
  connect: StudentWhereUniqueInput
  connectOrCreate: StudentCreateOrConnectWithoutImagesInput
  create: StudentUncheckedCreateWithoutImagesInput
  delete: Boolean
  disconnect: Boolean
  update: StudentUncheckedUpdateWithoutImagesInput
  upsert: StudentUpsertWithoutImagesInput
}

input StudentUpdateWithWhereUniqueWithoutSchoolInput {
  data: StudentUncheckedUpdateWithoutSchoolInput!
  where: StudentWhereUniqueInput!
}

input StudentUpdateWithoutImagesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  dateOfFinish: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  school: SchoolUpdateOneRequiredWithoutStudentsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StudentUpdateWithoutSchoolInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  dateOfFinish: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutStudentInput
  lastName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StudentUpsertWithWhereUniqueWithoutSchoolInput {
  create: StudentUncheckedCreateWithoutSchoolInput!
  update: StudentUncheckedUpdateWithoutSchoolInput!
  where: StudentWhereUniqueInput!
}

input StudentUpsertWithoutImagesInput {
  create: StudentUncheckedCreateWithoutImagesInput!
  update: StudentUncheckedUpdateWithoutImagesInput!
}

input StudentWhereInput {
  AND: [StudentWhereInput]
  NOT: [StudentWhereInput]
  OR: [StudentWhereInput]
  createdAt: DateTimeFilter
  dateOfFinish: DateTimeFilter
  firstName: StringFilter
  id: IntFilter
  images: ImageListRelationFilter
  lastName: StringFilter
  school: SchoolWhereInput
  schoolId: IntFilter
  updatedAt: DateTimeFilter
}

input StudentWhereUniqueInput {
  id: Int
}

type Subject {
  _count: SubjectCountOutputType
  createdAt: DateTime!
  descriptionEn: String
  descriptionKz: String
  descriptionRu: String
  id: Int!
  schools(cursor: TeacherWhereUniqueInput, distinct: TeacherScalarFieldEnum, orderBy: TeacherOrderByWithRelationInput, skip: Int, take: Int, where: TeacherWhereInput): [Teacher!]!
  titleEn: String!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime!
}

type SubjectAvgAggregateOutputType {
  id: Float
}

input SubjectAvgOrderByAggregateInput {
  id: SortOrder
}

type SubjectCountAggregateOutputType {
  _all: Int!
  createdAt: Int!
  descriptionEn: Int!
  descriptionKz: Int!
  descriptionRu: Int!
  id: Int!
  titleEn: Int!
  titleKz: Int!
  titleRu: Int!
  updatedAt: Int!
}

input SubjectCountOrderByAggregateInput {
  createdAt: SortOrder
  descriptionEn: SortOrder
  descriptionKz: SortOrder
  descriptionRu: SortOrder
  id: SortOrder
  titleEn: SortOrder
  titleKz: SortOrder
  titleRu: SortOrder
  updatedAt: SortOrder
}

type SubjectCountOutputType {
  schools: Int!
}

input SubjectCreateInput {
  createdAt: DateTime
  descriptionEn: String
  descriptionKz: String
  descriptionRu: String
  schools: TeacherCreateNestedManyWithoutSubjectInput
  titleEn: String!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime
}

input SubjectCreateManyInput {
  createdAt: DateTime
  descriptionEn: String
  descriptionKz: String
  descriptionRu: String
  id: Int
  titleEn: String!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime
}

input SubjectCreateNestedOneWithoutSchoolsInput {
  connect: SubjectWhereUniqueInput
  connectOrCreate: SubjectCreateOrConnectWithoutSchoolsInput
  create: SubjectUncheckedCreateWithoutSchoolsInput
}

input SubjectCreateOrConnectWithoutSchoolsInput {
  create: SubjectUncheckedCreateWithoutSchoolsInput!
  where: SubjectWhereUniqueInput!
}

input SubjectCreateWithoutSchoolsInput {
  createdAt: DateTime
  descriptionEn: String
  descriptionKz: String
  descriptionRu: String
  titleEn: String!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime
}

type SubjectMaxAggregateOutputType {
  createdAt: DateTime
  descriptionEn: String
  descriptionKz: String
  descriptionRu: String
  id: Int
  titleEn: String
  titleKz: String
  titleRu: String
  updatedAt: DateTime
}

input SubjectMaxOrderByAggregateInput {
  createdAt: SortOrder
  descriptionEn: SortOrder
  descriptionKz: SortOrder
  descriptionRu: SortOrder
  id: SortOrder
  titleEn: SortOrder
  titleKz: SortOrder
  titleRu: SortOrder
  updatedAt: SortOrder
}

type SubjectMinAggregateOutputType {
  createdAt: DateTime
  descriptionEn: String
  descriptionKz: String
  descriptionRu: String
  id: Int
  titleEn: String
  titleKz: String
  titleRu: String
  updatedAt: DateTime
}

input SubjectMinOrderByAggregateInput {
  createdAt: SortOrder
  descriptionEn: SortOrder
  descriptionKz: SortOrder
  descriptionRu: SortOrder
  id: SortOrder
  titleEn: SortOrder
  titleKz: SortOrder
  titleRu: SortOrder
  updatedAt: SortOrder
}

input SubjectOrderByWithAggregationInput {
  _avg: SubjectAvgOrderByAggregateInput
  _count: SubjectCountOrderByAggregateInput
  _max: SubjectMaxOrderByAggregateInput
  _min: SubjectMinOrderByAggregateInput
  _sum: SubjectSumOrderByAggregateInput
  createdAt: SortOrder
  descriptionEn: SortOrder
  descriptionKz: SortOrder
  descriptionRu: SortOrder
  id: SortOrder
  titleEn: SortOrder
  titleKz: SortOrder
  titleRu: SortOrder
  updatedAt: SortOrder
}

input SubjectOrderByWithRelationInput {
  createdAt: SortOrder
  descriptionEn: SortOrder
  descriptionKz: SortOrder
  descriptionRu: SortOrder
  id: SortOrder
  schools: TeacherOrderByRelationAggregateInput
  titleEn: SortOrder
  titleKz: SortOrder
  titleRu: SortOrder
  updatedAt: SortOrder
}

input SubjectRelationFilter {
  is: SubjectWhereInput
  isNot: SubjectWhereInput
}

enum SubjectScalarFieldEnum {
  createdAt
  descriptionEn
  descriptionKz
  descriptionRu
  id
  titleEn
  titleKz
  titleRu
  updatedAt
}

input SubjectScalarWhereWithAggregatesInput {
  AND: [SubjectScalarWhereWithAggregatesInput]
  NOT: [SubjectScalarWhereWithAggregatesInput]
  OR: [SubjectScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  descriptionEn: StringNullableWithAggregatesFilter
  descriptionKz: StringNullableWithAggregatesFilter
  descriptionRu: StringNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  titleEn: StringWithAggregatesFilter
  titleKz: StringWithAggregatesFilter
  titleRu: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type SubjectSumAggregateOutputType {
  id: Int
}

input SubjectSumOrderByAggregateInput {
  id: SortOrder
}

input SubjectUncheckedCreateInput {
  createdAt: DateTime
  descriptionEn: String
  descriptionKz: String
  descriptionRu: String
  id: Int
  schools: TeacherUncheckedCreateNestedManyWithoutSubjectInput
  titleEn: String!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime
}

input SubjectUncheckedCreateWithoutSchoolsInput {
  createdAt: DateTime
  descriptionEn: String
  descriptionKz: String
  descriptionRu: String
  id: Int
  titleEn: String!
  titleKz: String!
  titleRu: String!
  updatedAt: DateTime
}

input SubjectUncheckedUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  descriptionEn: NullableStringFieldUpdateOperationsInput
  descriptionKz: NullableStringFieldUpdateOperationsInput
  descriptionRu: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  schools: TeacherUncheckedUpdateManyWithoutSubjectInput
  titleEn: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubjectUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  descriptionEn: NullableStringFieldUpdateOperationsInput
  descriptionKz: NullableStringFieldUpdateOperationsInput
  descriptionRu: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  titleEn: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubjectUncheckedUpdateWithoutSchoolsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  descriptionEn: NullableStringFieldUpdateOperationsInput
  descriptionKz: NullableStringFieldUpdateOperationsInput
  descriptionRu: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  titleEn: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubjectUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  descriptionEn: NullableStringFieldUpdateOperationsInput
  descriptionKz: NullableStringFieldUpdateOperationsInput
  descriptionRu: NullableStringFieldUpdateOperationsInput
  schools: TeacherUpdateManyWithoutSubjectInput
  titleEn: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubjectUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  descriptionEn: NullableStringFieldUpdateOperationsInput
  descriptionKz: NullableStringFieldUpdateOperationsInput
  descriptionRu: NullableStringFieldUpdateOperationsInput
  titleEn: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubjectUpdateOneWithoutSchoolsInput {
  connect: SubjectWhereUniqueInput
  connectOrCreate: SubjectCreateOrConnectWithoutSchoolsInput
  create: SubjectUncheckedCreateWithoutSchoolsInput
  delete: Boolean
  disconnect: Boolean
  update: SubjectUncheckedUpdateWithoutSchoolsInput
  upsert: SubjectUpsertWithoutSchoolsInput
}

input SubjectUpdateWithoutSchoolsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  descriptionEn: NullableStringFieldUpdateOperationsInput
  descriptionKz: NullableStringFieldUpdateOperationsInput
  descriptionRu: NullableStringFieldUpdateOperationsInput
  titleEn: StringFieldUpdateOperationsInput
  titleKz: StringFieldUpdateOperationsInput
  titleRu: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubjectUpsertWithoutSchoolsInput {
  create: SubjectUncheckedCreateWithoutSchoolsInput!
  update: SubjectUncheckedUpdateWithoutSchoolsInput!
}

input SubjectWhereInput {
  AND: [SubjectWhereInput]
  NOT: [SubjectWhereInput]
  OR: [SubjectWhereInput]
  createdAt: DateTimeFilter
  descriptionEn: StringNullableFilter
  descriptionKz: StringNullableFilter
  descriptionRu: StringNullableFilter
  id: IntFilter
  schools: TeacherListRelationFilter
  titleEn: StringFilter
  titleKz: StringFilter
  titleRu: StringFilter
  updatedAt: DateTimeFilter
}

input SubjectWhereUniqueInput {
  id: Int
}

type Teacher {
  _count: TeacherCountOutputType
  createdAt: DateTime!
  firstName: String!
  id: Int!
  images(cursor: ImageWhereUniqueInput, distinct: ImageScalarFieldEnum, orderBy: ImageOrderByWithRelationInput, skip: Int, take: Int, where: ImageWhereInput): [Image!]!
  lastName: String!
  subject: Subject
  subjectId: Int
  updatedAt: DateTime!
}

type TeacherAvgAggregateOutputType {
  id: Float
  subjectId: Float
}

input TeacherAvgOrderByAggregateInput {
  id: SortOrder
  subjectId: SortOrder
}

type TeacherCountAggregateOutputType {
  _all: Int!
  createdAt: Int!
  firstName: Int!
  id: Int!
  lastName: Int!
  subjectId: Int!
  updatedAt: Int!
}

input TeacherCountOrderByAggregateInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  subjectId: SortOrder
  updatedAt: SortOrder
}

type TeacherCountOutputType {
  images: Int!
}

input TeacherCreateInput {
  createdAt: DateTime
  firstName: String!
  images: ImageCreateNestedManyWithoutTeacherInput
  lastName: String!
  subject: SubjectCreateNestedOneWithoutSchoolsInput
  updatedAt: DateTime
}

input TeacherCreateManyInput {
  createdAt: DateTime
  firstName: String!
  id: Int
  lastName: String!
  subjectId: Int
  updatedAt: DateTime
}

input TeacherCreateManySubjectInput {
  createdAt: DateTime
  firstName: String!
  id: Int
  lastName: String!
  updatedAt: DateTime
}

input TeacherCreateManySubjectInputEnvelope {
  data: TeacherCreateManySubjectInput!
  skipDuplicates: Boolean
}

input TeacherCreateNestedManyWithoutSubjectInput {
  connect: [TeacherWhereUniqueInput]
  connectOrCreate: [TeacherCreateOrConnectWithoutSubjectInput]
  create: [TeacherCreateWithoutSubjectInput]
  createMany: TeacherCreateManySubjectInputEnvelope
}

input TeacherCreateNestedOneWithoutImagesInput {
  connect: TeacherWhereUniqueInput
  connectOrCreate: TeacherCreateOrConnectWithoutImagesInput
  create: TeacherUncheckedCreateWithoutImagesInput
}

input TeacherCreateOrConnectWithoutImagesInput {
  create: TeacherUncheckedCreateWithoutImagesInput!
  where: TeacherWhereUniqueInput!
}

input TeacherCreateOrConnectWithoutSubjectInput {
  create: TeacherUncheckedCreateWithoutSubjectInput!
  where: TeacherWhereUniqueInput!
}

input TeacherCreateWithoutImagesInput {
  createdAt: DateTime
  firstName: String!
  lastName: String!
  subject: SubjectCreateNestedOneWithoutSchoolsInput
  updatedAt: DateTime
}

input TeacherCreateWithoutSubjectInput {
  createdAt: DateTime
  firstName: String!
  images: ImageCreateNestedManyWithoutTeacherInput
  lastName: String!
  updatedAt: DateTime
}

input TeacherListRelationFilter {
  every: TeacherWhereInput
  none: TeacherWhereInput
  some: TeacherWhereInput
}

type TeacherMaxAggregateOutputType {
  createdAt: DateTime
  firstName: String
  id: Int
  lastName: String
  subjectId: Int
  updatedAt: DateTime
}

input TeacherMaxOrderByAggregateInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  subjectId: SortOrder
  updatedAt: SortOrder
}

type TeacherMinAggregateOutputType {
  createdAt: DateTime
  firstName: String
  id: Int
  lastName: String
  subjectId: Int
  updatedAt: DateTime
}

input TeacherMinOrderByAggregateInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  subjectId: SortOrder
  updatedAt: SortOrder
}

input TeacherOrderByRelationAggregateInput {
  _count: SortOrder
}

input TeacherOrderByWithAggregationInput {
  _avg: TeacherAvgOrderByAggregateInput
  _count: TeacherCountOrderByAggregateInput
  _max: TeacherMaxOrderByAggregateInput
  _min: TeacherMinOrderByAggregateInput
  _sum: TeacherSumOrderByAggregateInput
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  subjectId: SortOrder
  updatedAt: SortOrder
}

input TeacherOrderByWithRelationInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  images: ImageOrderByRelationAggregateInput
  lastName: SortOrder
  subject: SubjectOrderByWithRelationInput
  subjectId: SortOrder
  updatedAt: SortOrder
}

input TeacherRelationFilter {
  is: TeacherWhereInput
  isNot: TeacherWhereInput
}

enum TeacherScalarFieldEnum {
  createdAt
  firstName
  id
  lastName
  subjectId
  updatedAt
}

input TeacherScalarWhereInput {
  AND: [TeacherScalarWhereInput]
  NOT: [TeacherScalarWhereInput]
  OR: [TeacherScalarWhereInput]
  createdAt: DateTimeFilter
  firstName: StringFilter
  id: IntFilter
  lastName: StringFilter
  subjectId: IntNullableFilter
  updatedAt: DateTimeFilter
}

input TeacherScalarWhereWithAggregatesInput {
  AND: [TeacherScalarWhereWithAggregatesInput]
  NOT: [TeacherScalarWhereWithAggregatesInput]
  OR: [TeacherScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  firstName: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  lastName: StringWithAggregatesFilter
  subjectId: IntNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type TeacherSumAggregateOutputType {
  id: Int
  subjectId: Int
}

input TeacherSumOrderByAggregateInput {
  id: SortOrder
  subjectId: SortOrder
}

input TeacherUncheckedCreateInput {
  createdAt: DateTime
  firstName: String!
  id: Int
  images: ImageUncheckedCreateNestedManyWithoutTeacherInput
  lastName: String!
  subjectId: Int
  updatedAt: DateTime
}

input TeacherUncheckedCreateNestedManyWithoutSubjectInput {
  connect: [TeacherWhereUniqueInput]
  connectOrCreate: [TeacherCreateOrConnectWithoutSubjectInput]
  create: [TeacherCreateWithoutSubjectInput]
  createMany: TeacherCreateManySubjectInputEnvelope
}

input TeacherUncheckedCreateWithoutImagesInput {
  createdAt: DateTime
  firstName: String!
  id: Int
  lastName: String!
  subjectId: Int
  updatedAt: DateTime
}

input TeacherUncheckedCreateWithoutSubjectInput {
  createdAt: DateTime
  firstName: String!
  id: Int
  images: ImageUncheckedCreateNestedManyWithoutTeacherInput
  lastName: String!
  updatedAt: DateTime
}

input TeacherUncheckedUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  images: ImageUncheckedUpdateManyWithoutTeacherInput
  lastName: StringFieldUpdateOperationsInput
  subjectId: NullableIntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeacherUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  subjectId: NullableIntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeacherUncheckedUpdateManyWithoutSchoolsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeacherUncheckedUpdateManyWithoutSubjectInput {
  connect: [TeacherWhereUniqueInput]
  connectOrCreate: [TeacherCreateOrConnectWithoutSubjectInput]
  create: [TeacherCreateWithoutSubjectInput]
  createMany: TeacherCreateManySubjectInputEnvelope
  delete: [TeacherWhereUniqueInput]
  deleteMany: [TeacherScalarWhereInput]
  disconnect: [TeacherWhereUniqueInput]
  set: [TeacherWhereUniqueInput]
  update: [TeacherUpdateWithWhereUniqueWithoutSubjectInput]
  updateMany: [TeacherUpdateManyWithWhereWithoutSubjectInput]
  upsert: [TeacherUpsertWithWhereUniqueWithoutSubjectInput]
}

input TeacherUncheckedUpdateWithoutImagesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  subjectId: NullableIntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeacherUncheckedUpdateWithoutSubjectInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  images: ImageUncheckedUpdateManyWithoutTeacherInput
  lastName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeacherUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutTeacherInput
  lastName: StringFieldUpdateOperationsInput
  subject: SubjectUpdateOneWithoutSchoolsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeacherUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeacherUpdateManyWithWhereWithoutSubjectInput {
  data: TeacherUncheckedUpdateManyWithoutSchoolsInput!
  where: TeacherScalarWhereInput!
}

input TeacherUpdateManyWithoutSubjectInput {
  connect: [TeacherWhereUniqueInput]
  connectOrCreate: [TeacherCreateOrConnectWithoutSubjectInput]
  create: [TeacherCreateWithoutSubjectInput]
  createMany: TeacherCreateManySubjectInputEnvelope
  delete: [TeacherWhereUniqueInput]
  deleteMany: [TeacherScalarWhereInput]
  disconnect: [TeacherWhereUniqueInput]
  set: [TeacherWhereUniqueInput]
  update: [TeacherUpdateWithWhereUniqueWithoutSubjectInput]
  updateMany: [TeacherUpdateManyWithWhereWithoutSubjectInput]
  upsert: [TeacherUpsertWithWhereUniqueWithoutSubjectInput]
}

input TeacherUpdateOneWithoutImagesInput {
  connect: TeacherWhereUniqueInput
  connectOrCreate: TeacherCreateOrConnectWithoutImagesInput
  create: TeacherUncheckedCreateWithoutImagesInput
  delete: Boolean
  disconnect: Boolean
  update: TeacherUncheckedUpdateWithoutImagesInput
  upsert: TeacherUpsertWithoutImagesInput
}

input TeacherUpdateWithWhereUniqueWithoutSubjectInput {
  data: TeacherUncheckedUpdateWithoutSubjectInput!
  where: TeacherWhereUniqueInput!
}

input TeacherUpdateWithoutImagesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  subject: SubjectUpdateOneWithoutSchoolsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeacherUpdateWithoutSubjectInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  images: ImageUpdateManyWithoutTeacherInput
  lastName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeacherUpsertWithWhereUniqueWithoutSubjectInput {
  create: TeacherUncheckedCreateWithoutSubjectInput!
  update: TeacherUncheckedUpdateWithoutSubjectInput!
  where: TeacherWhereUniqueInput!
}

input TeacherUpsertWithoutImagesInput {
  create: TeacherUncheckedCreateWithoutImagesInput!
  update: TeacherUncheckedUpdateWithoutImagesInput!
}

input TeacherWhereInput {
  AND: [TeacherWhereInput]
  NOT: [TeacherWhereInput]
  OR: [TeacherWhereInput]
  createdAt: DateTimeFilter
  firstName: StringFilter
  id: IntFilter
  images: ImageListRelationFilter
  lastName: StringFilter
  subject: SubjectWhereInput
  subjectId: IntNullableFilter
  updatedAt: DateTimeFilter
}

input TeacherWhereUniqueInput {
  id: Int
}

input UpdateFieldInput {
  create: Boolean
  editor: Boolean
  filter: Boolean
  id: String
  isId: Boolean
  kind: KindEnum
  list: Boolean
  name: String
  order: Int
  read: Boolean
  relationField: Boolean
  required: Boolean
  sort: Boolean
  title: String
  type: String
  unique: Boolean
  update: Boolean
  upload: Boolean
}

input UpdateModelInput {
  create: Boolean
  delete: Boolean
  displayFields: [String]
  fields: [UpdateFieldInput]
  idField: String
  name: String
  update: Boolean
}

type User {
  createdAt: DateTime!
  dateLastLogin: DateTime!
  email: String!
  fio: String!
  id: Int!
  image: String
  isAdmin: Boolean!
  isBlocked: Boolean!
  password: String!
  passwordChangedTime: DateTime!
  rememberToken: String
  updatedAt: DateTime!
}

type UserAvgAggregateOutputType {
  id: Float
}

input UserAvgOrderByAggregateInput {
  id: SortOrder
}

type UserCountAggregateOutputType {
  _all: Int!
  createdAt: Int!
  dateLastLogin: Int!
  email: Int!
  fio: Int!
  id: Int!
  image: Int!
  isAdmin: Int!
  isBlocked: Int!
  password: Int!
  passwordChangedTime: Int!
  rememberToken: Int!
  updatedAt: Int!
}

input UserCountOrderByAggregateInput {
  createdAt: SortOrder
  dateLastLogin: SortOrder
  email: SortOrder
  fio: SortOrder
  id: SortOrder
  image: SortOrder
  isAdmin: SortOrder
  isBlocked: SortOrder
  password: SortOrder
  passwordChangedTime: SortOrder
  rememberToken: SortOrder
  updatedAt: SortOrder
}

input UserCreateInput {
  createdAt: DateTime
  dateLastLogin: DateTime
  email: String!
  fio: String!
  image: String
  isAdmin: Boolean
  isBlocked: Boolean
  password: String!
  passwordChangedTime: DateTime
  rememberToken: String
  updatedAt: DateTime
}

input UserCreateManyInput {
  createdAt: DateTime
  dateLastLogin: DateTime
  email: String!
  fio: String!
  id: Int
  image: String
  isAdmin: Boolean
  isBlocked: Boolean
  password: String!
  passwordChangedTime: DateTime
  rememberToken: String
  updatedAt: DateTime
}

type UserMaxAggregateOutputType {
  createdAt: DateTime
  dateLastLogin: DateTime
  email: String
  fio: String
  id: Int
  image: String
  isAdmin: Boolean
  isBlocked: Boolean
  password: String
  passwordChangedTime: DateTime
  rememberToken: String
  updatedAt: DateTime
}

input UserMaxOrderByAggregateInput {
  createdAt: SortOrder
  dateLastLogin: SortOrder
  email: SortOrder
  fio: SortOrder
  id: SortOrder
  image: SortOrder
  isAdmin: SortOrder
  isBlocked: SortOrder
  password: SortOrder
  passwordChangedTime: SortOrder
  rememberToken: SortOrder
  updatedAt: SortOrder
}

type UserMinAggregateOutputType {
  createdAt: DateTime
  dateLastLogin: DateTime
  email: String
  fio: String
  id: Int
  image: String
  isAdmin: Boolean
  isBlocked: Boolean
  password: String
  passwordChangedTime: DateTime
  rememberToken: String
  updatedAt: DateTime
}

input UserMinOrderByAggregateInput {
  createdAt: SortOrder
  dateLastLogin: SortOrder
  email: SortOrder
  fio: SortOrder
  id: SortOrder
  image: SortOrder
  isAdmin: SortOrder
  isBlocked: SortOrder
  password: SortOrder
  passwordChangedTime: SortOrder
  rememberToken: SortOrder
  updatedAt: SortOrder
}

input UserOrderByWithAggregationInput {
  _avg: UserAvgOrderByAggregateInput
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  _sum: UserSumOrderByAggregateInput
  createdAt: SortOrder
  dateLastLogin: SortOrder
  email: SortOrder
  fio: SortOrder
  id: SortOrder
  image: SortOrder
  isAdmin: SortOrder
  isBlocked: SortOrder
  password: SortOrder
  passwordChangedTime: SortOrder
  rememberToken: SortOrder
  updatedAt: SortOrder
}

input UserOrderByWithRelationInput {
  createdAt: SortOrder
  dateLastLogin: SortOrder
  email: SortOrder
  fio: SortOrder
  id: SortOrder
  image: SortOrder
  isAdmin: SortOrder
  isBlocked: SortOrder
  password: SortOrder
  passwordChangedTime: SortOrder
  rememberToken: SortOrder
  updatedAt: SortOrder
}

enum UserScalarFieldEnum {
  createdAt
  dateLastLogin
  email
  fio
  id
  image
  isAdmin
  isBlocked
  password
  passwordChangedTime
  rememberToken
  updatedAt
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput]
  NOT: [UserScalarWhereWithAggregatesInput]
  OR: [UserScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  dateLastLogin: DateTimeWithAggregatesFilter
  email: StringWithAggregatesFilter
  fio: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  image: StringNullableWithAggregatesFilter
  isAdmin: BoolWithAggregatesFilter
  isBlocked: BoolWithAggregatesFilter
  password: StringWithAggregatesFilter
  passwordChangedTime: DateTimeWithAggregatesFilter
  rememberToken: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type UserSumAggregateOutputType {
  id: Int
}

input UserSumOrderByAggregateInput {
  id: SortOrder
}

input UserUncheckedCreateInput {
  createdAt: DateTime
  dateLastLogin: DateTime
  email: String!
  fio: String!
  id: Int
  image: String
  isAdmin: Boolean
  isBlocked: Boolean
  password: String!
  passwordChangedTime: DateTime
  rememberToken: String
  updatedAt: DateTime
}

input UserUncheckedUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  dateLastLogin: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  fio: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBlocked: BoolFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  passwordChangedTime: DateTimeFieldUpdateOperationsInput
  rememberToken: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  dateLastLogin: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  fio: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBlocked: BoolFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  passwordChangedTime: DateTimeFieldUpdateOperationsInput
  rememberToken: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  dateLastLogin: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  fio: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBlocked: BoolFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  passwordChangedTime: DateTimeFieldUpdateOperationsInput
  rememberToken: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  dateLastLogin: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  fio: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  isBlocked: BoolFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  passwordChangedTime: DateTimeFieldUpdateOperationsInput
  rememberToken: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserWhereInput {
  AND: [UserWhereInput]
  NOT: [UserWhereInput]
  OR: [UserWhereInput]
  createdAt: DateTimeFilter
  dateLastLogin: DateTimeFilter
  email: StringFilter
  fio: StringFilter
  id: IntFilter
  image: StringNullableFilter
  isAdmin: BoolFilter
  isBlocked: BoolFilter
  password: StringFilter
  passwordChangedTime: DateTimeFilter
  rememberToken: StringNullableFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
